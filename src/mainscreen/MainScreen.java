/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainscreen;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.StyleSheet;
import model.*;
import model.player.PlayerInterface;
import model.team.TeamInterface;
import model.team.Region;
import model.prizes.*;
/**
 *
 * @author claymackenthun
 */
public class MainScreen extends javax.swing.JFrame {
    MarchMadnessDB db;
    PlayerInterface playerScreenPlayer;
    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        
        
        
        //Endless loop set new regions full data
        db = new MarchMadnessDB();
        fileHandler = new FileHandler(this,null);
        try {
            fileHandler.initialize();
        } catch (FileNotFoundException ex) {
            fileHandler.setFile(new File("Untitled.mm"));
        } catch (IOException e) {
            fileHandler.setFile(new File("Untitled.mm"));
        }
        //this.initialize();
        initComponents();
        this.restorePreferences();
        //this.playIntro();
        //initComponents();
        //this.updateTeamComboBoxModels();
        //this.setTeamTextFields();
        //this.updateRegionMatchups();
        //this.updateSettingsOptions();
        //this.updateBracket();
        //this.updateStandings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        TabbedPane = new javax.swing.JTabbedPane();
        mainPanel = new mainscreen.MMPanel();
        MainTitleLabel = new javax.swing.JLabel();
        PlayerEarningsLabel = new javax.swing.JLabel();
        SaveButton = new javax.swing.JButton();
        OutputFileButton = new javax.swing.JButton();
        MMIcon = new javax.swing.JLabel();
        FileLabel = new javax.swing.JLabel();
        HelpIcon = new javax.swing.JLabel();
        mainSubtitleLabel = new javax.swing.JLabel();
        PlayerEarningsScrollPane = new javax.swing.JScrollPane();
        PlayerEarningsEditorPane = new javax.swing.JEditorPane();
        standingsPanel = new mainscreen.MMPanel();
        OwnedTeamsStandingsLabel = new javax.swing.JLabel();
        PickFourStandingsLabel = new javax.swing.JLabel();
        ChosenWinnerStandingsLabel = new javax.swing.JLabel();
        CinderellaTeamLabel = new javax.swing.JLabel();
        CinderellaTeamScrollPane = new javax.swing.JScrollPane();
        CinderellaTeamTextPane = new javax.swing.JTextPane();
        FirstRoundBlowoutLabel = new javax.swing.JLabel();
        FirstRoundBlowoutScrollPane = new javax.swing.JScrollPane();
        FirstRoundBlowoutTextPane = new javax.swing.JTextPane();
        FirstOTLossLabel = new javax.swing.JLabel();
        FirstOTLossScrollPane = new javax.swing.JScrollPane();
        FirstOTLossTextPane = new javax.swing.JTextPane();
        ownedTeamsScrollPane = new javax.swing.JScrollPane();
        ownedTeamEditorPane = new javax.swing.JEditorPane();
        pickFourScrollPane = new javax.swing.JScrollPane();
        pickFourEditorPane = new javax.swing.JEditorPane();
        uPickItScrollPane = new javax.swing.JScrollPane();
        uPickItEditorPane = new javax.swing.JEditorPane();
        playersPanel = new mainscreen.MMPanel();
        PlayerViewerPanel = new javax.swing.JPanel();
        PickFourTeamsLabel = new javax.swing.JLabel();
        PlayerNameTextField = new javax.swing.JTextField();
        ChosenWinnerTeam = new javax.swing.JComboBox();
        PlayerNameLabel = new javax.swing.JLabel();
        UpdatePlayerButton = new javax.swing.JButton();
        TiebreakerScoreLabel = new javax.swing.JLabel();
        OwnedTeamsPane = new javax.swing.JScrollPane();
        OwnedTeamsList = new javax.swing.JList();
        SpotsPurchasedComboBox = new javax.swing.JComboBox();
        PickFourTeam4 = new javax.swing.JComboBox();
        BalanceTextField = new javax.swing.JTextField();
        SpotsPurchasedLabel = new javax.swing.JLabel();
        PickFourTeam3 = new javax.swing.JComboBox();
        EntryFeePaidCheckBox = new javax.swing.JCheckBox();
        OwnedTeamLabel = new javax.swing.JLabel();
        ChosenWinnerLabel = new javax.swing.JLabel();
        PickFourTeam2 = new javax.swing.JComboBox();
        TiebreakerScoreTextField = new javax.swing.JTextField();
        BalanceLabel = new javax.swing.JLabel();
        ClearButton = new javax.swing.JButton();
        PickFourTeam1 = new javax.swing.JComboBox();
        PlayersListLabel = new javax.swing.JLabel();
        AssignTeamsButton = new javax.swing.JButton();
        playerMessageLabel = new javax.swing.JLabel();
        PlayerListPanel = new javax.swing.JPanel();
        SpotsRemainingLabel = new javax.swing.JLabel();
        PlayerViewerLabel = new javax.swing.JLabel();
        PlayersListPane = new javax.swing.JScrollPane();
        PlayersList = new javax.swing.JList();
        DeletePlayerButton = new javax.swing.JButton();
        ViewButton = new javax.swing.JButton();
        PlayerListPanel1 = new javax.swing.JPanel();
        PlayerViewerLabel1 = new javax.swing.JLabel();
        missingFieldsScrollPane = new javax.swing.JScrollPane();
        missingFieldsTextPane = new javax.swing.JTextPane();
        teamsPanel = new mainscreen.MMPanel();
        TeamSeedsPanel = new javax.swing.JPanel();
        seed2Label = new javax.swing.JLabel();
        team1TextField = new javax.swing.JTextField();
        team2TextField = new javax.swing.JTextField();
        team11TextField = new javax.swing.JTextField();
        seed6Label = new javax.swing.JLabel();
        team7TextField = new javax.swing.JTextField();
        team16TextField = new javax.swing.JTextField();
        team13TextField = new javax.swing.JTextField();
        seed10Label = new javax.swing.JLabel();
        team8TextField = new javax.swing.JTextField();
        seed9Label = new javax.swing.JLabel();
        seed11Label = new javax.swing.JLabel();
        team4TextField = new javax.swing.JTextField();
        RegionLabel = new javax.swing.JLabel();
        seed12Label = new javax.swing.JLabel();
        team14TextField = new javax.swing.JTextField();
        seed13Label = new javax.swing.JLabel();
        seed3Label = new javax.swing.JLabel();
        seed7Label = new javax.swing.JLabel();
        seed5Label = new javax.swing.JLabel();
        seed4Label = new javax.swing.JLabel();
        team9TextField = new javax.swing.JTextField();
        team15TextField = new javax.swing.JTextField();
        team6TextField = new javax.swing.JTextField();
        team10TextField = new javax.swing.JTextField();
        team12TextField = new javax.swing.JTextField();
        UpdateTeamsButton = new javax.swing.JButton();
        team3TextField = new javax.swing.JTextField();
        seed15Label = new javax.swing.JLabel();
        seed1Label = new javax.swing.JLabel();
        team5TextField = new javax.swing.JTextField();
        seed16Label = new javax.swing.JLabel();
        RegionComboBox = new javax.swing.JComboBox();
        seed8Label = new javax.swing.JLabel();
        seed14Label = new javax.swing.JLabel();
        TeamsListPanel = new javax.swing.JPanel();
        TeamsListPane = new javax.swing.JScrollPane();
        TeamsList = new javax.swing.JList();
        TeamsListLabel = new javax.swing.JLabel();
        DeleteTeamButton = new javax.swing.JButton();
        BracketScrollPane = new javax.swing.JScrollPane();
        BracketTextPane = new javax.swing.JTextPane();
        BracketLabel = new javax.swing.JLabel();
        TeamScoresPanel = new javax.swing.JPanel();
        TeamsListLabel1 = new javax.swing.JLabel();
        AddScoreButton = new javax.swing.JButton();
        Team1ComboBox = new javax.swing.JComboBox();
        Team1OpponentScoreTextField = new javax.swing.JTextField();
        Team1OpponentComboBox = new javax.swing.JComboBox();
        otCheckBox = new javax.swing.JCheckBox();
        Team1ScoreTextField = new javax.swing.JTextField();
        settingsPanel = new mainscreen.MMPanel();
        SettingsUpdateButton = new javax.swing.JButton();
        RegionMatchupsPanel = new javax.swing.JPanel();
        RegionMatchupsLabel = new javax.swing.JLabel();
        Region3Label = new javax.swing.JLabel();
        vs1Label = new javax.swing.JLabel();
        Region4Label = new javax.swing.JLabel();
        Region1ComboBox = new javax.swing.JComboBox();
        Region2ComboBox = new javax.swing.JComboBox();
        vs2Label = new javax.swing.JLabel();
        ContestPrizesPanel = new javax.swing.JPanel();
        ContestComboBox = new javax.swing.JComboBox();
        ContestPrizesLabel = new javax.swing.JLabel();
        ContestLabel = new javax.swing.JLabel();
        PrizeLabel = new javax.swing.JLabel();
        DollarSignLabel2 = new javax.swing.JLabel();
        PrizeTextField = new javax.swing.JTextField();
        PlayerPricingPanel = new javax.swing.JPanel();
        PriceTextField = new javax.swing.JTextField();
        SpotsComboBox = new javax.swing.JComboBox();
        PriceLabel = new javax.swing.JLabel();
        SpotsLabel = new javax.swing.JLabel();
        DollarSignLabel = new javax.swing.JLabel();
        PlayerPricingLabel = new javax.swing.JLabel();
        LeaderboardPanel = new javax.swing.JPanel();
        PlayerPricingLabel1 = new javax.swing.JLabel();
        LeaderboardSizeLabel = new javax.swing.JLabel();
        LeaderboardSizeComboBox = new javax.swing.JComboBox();
        DataResetPanel = new javax.swing.JPanel();
        DataResetLabel = new javax.swing.JLabel();
        ResetPlayerDataRadioButton = new javax.swing.JRadioButton();
        RemoveTeamsRadioButton = new javax.swing.JRadioButton();
        RemoveScoresRadioButton = new javax.swing.JRadioButton();
        RemovePlayersRadioButton = new javax.swing.JRadioButton();
        SettingsTitleLabel = new javax.swing.JLabel();
        muteCheckBox = new javax.swing.JCheckBox();
        animationCheckBox = new javax.swing.JCheckBox();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        NewMenuItem = new javax.swing.JMenuItem();
        SaveMenuItem = new javax.swing.JMenuItem();
        SaveAsMenuItem = new javax.swing.JMenuItem();
        OpenMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("March Madness Game");
        setMaximumSize(new java.awt.Dimension(32767, 32767));
        setPreferredSize(new java.awt.Dimension(1100, 600));
        setSize(new java.awt.Dimension(1300, 700));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        TabbedPane.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        TabbedPane.setPreferredSize(new java.awt.Dimension(1100, 600));
        TabbedPane.setSize(new java.awt.Dimension(1200, 600));
        TabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabbedPaneStateChanged(evt);
            }
        });

        mainPanel.setPreferredSize(new java.awt.Dimension(1100, 600));

        MainTitleLabel.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        MainTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MainTitleLabel.setText(mainTitle);
        MainTitleLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MainTitleLabelMouseClicked(evt);
            }
        });

        PlayerEarningsLabel.setBackground(backgroundColor);
        PlayerEarningsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        PlayerEarningsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PlayerEarningsLabel.setText("Player Earnings:");
        PlayerEarningsLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 255, 255), null, null));
        PlayerEarningsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PlayerEarningsLabel.setOpaque(true);

        SaveButton.setText("Save");
        SaveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        OutputFileButton.setText("Generate Output File");
        OutputFileButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        OutputFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        OutputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputFileButtonActionPerformed(evt);
            }
        });

        MMIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(mainIconPath)));
        MMIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MMIconMouseClicked(evt);
            }
        });

        FileLabel.setBackground(backgroundColor);
        FileLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        FileLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FileLabel.setText("File");
        FileLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        FileLabel.setOpaque(true);

        HelpIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mainscreen/resources/questionMark.png"))); // NOI18N
        HelpIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        HelpIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HelpIconMouseClicked(evt);
            }
        });

        mainSubtitleLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        mainSubtitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainSubtitleLabel.setText(mainSubtitle);
        mainSubtitleLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainSubtitleLabelMouseClicked(evt);
            }
        });

        PlayerEarningsEditorPane.setEditable(false);
        PlayerEarningsEditorPane.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        PlayerEarningsScrollPane.setViewportView(PlayerEarningsEditorPane);
        HTMLEditorKit playerEarningsKit = new HTMLEditorKit();
        PlayerEarningsEditorPane.setEditorKit(playerEarningsKit);
        PlayerEarningsEditorPane.setDocument(playerEarningsKit.createDefaultDocument());

        this.styleTables(playerEarningsKit.getStyleSheet());

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PlayerEarningsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
                            .addComponent(PlayerEarningsScrollPane))
                        .addGap(50, 50, 50)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MMIcon)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(OutputFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(FileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(HelpIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(155, 155, 155))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainSubtitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(MainTitleLabel)
                .addGap(2, 2, 2)
                .addComponent(mainSubtitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(MMIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OutputFileButton)
                            .addComponent(SaveButton))
                        .addGap(6, 6, 6)
                        .addComponent(FileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(PlayerEarningsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PlayerEarningsScrollPane)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HelpIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TabbedPane.addTab("Main", mainPanel);

        standingsPanel.setPreferredSize(new java.awt.Dimension(1100, 600));

        OwnedTeamsStandingsLabel.setBackground(backgroundColor);
        OwnedTeamsStandingsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        OwnedTeamsStandingsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        OwnedTeamsStandingsLabel.setText("Owned Teams:");
        OwnedTeamsStandingsLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        OwnedTeamsStandingsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        OwnedTeamsStandingsLabel.setOpaque(true);

        PickFourStandingsLabel.setBackground(backgroundColor);
        PickFourStandingsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        PickFourStandingsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PickFourStandingsLabel.setText("Pick Four:");
        PickFourStandingsLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        PickFourStandingsLabel.setOpaque(true);

        ChosenWinnerStandingsLabel.setBackground(backgroundColor);
        ChosenWinnerStandingsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        ChosenWinnerStandingsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChosenWinnerStandingsLabel.setText("U-Pick-It:");
        ChosenWinnerStandingsLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ChosenWinnerStandingsLabel.setOpaque(true);

        CinderellaTeamLabel.setBackground(backgroundColor);
        CinderellaTeamLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        CinderellaTeamLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CinderellaTeamLabel.setText("Cinderella Team:");
        CinderellaTeamLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CinderellaTeamLabel.setOpaque(true);

        CinderellaTeamTextPane.setEditable(false);
        CinderellaTeamTextPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CinderellaTeamTextPane.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        CinderellaTeamScrollPane.setViewportView(CinderellaTeamTextPane);

        FirstRoundBlowoutLabel.setBackground(backgroundColor);
        FirstRoundBlowoutLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        FirstRoundBlowoutLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FirstRoundBlowoutLabel.setText("First Round Blowout:");
        FirstRoundBlowoutLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        FirstRoundBlowoutLabel.setOpaque(true);

        FirstRoundBlowoutTextPane.setEditable(false);
        FirstRoundBlowoutTextPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        FirstRoundBlowoutTextPane.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        FirstRoundBlowoutTextPane.setMaximumSize(new java.awt.Dimension(200, 100));
        FirstRoundBlowoutScrollPane.setViewportView(FirstRoundBlowoutTextPane);

        FirstOTLossLabel.setBackground(backgroundColor);
        FirstOTLossLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        FirstOTLossLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FirstOTLossLabel.setText("First Overtime Loss:");
        FirstOTLossLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        FirstOTLossLabel.setOpaque(true);

        FirstOTLossTextPane.setEditable(false);
        FirstOTLossTextPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        FirstOTLossTextPane.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        FirstOTLossScrollPane.setViewportView(FirstOTLossTextPane);

        ownedTeamEditorPane.setEditable(false);
        ownedTeamsScrollPane.setViewportView(ownedTeamEditorPane);
        HTMLEditorKit ownedTeamsKit = new HTMLEditorKit();
        ownedTeamEditorPane.setEditorKit(ownedTeamsKit);
        ownedTeamEditorPane.setDocument(ownedTeamsKit.createDefaultDocument());

        this.styleTables(ownedTeamsKit.getStyleSheet());

        pickFourEditorPane.setEditable(false);
        pickFourScrollPane.setViewportView(pickFourEditorPane);
        HTMLEditorKit pickFourKit = new HTMLEditorKit();
        pickFourEditorPane.setEditorKit(pickFourKit);
        pickFourEditorPane.setDocument(pickFourKit.createDefaultDocument());

        this.styleTables(pickFourKit.getStyleSheet());

        uPickItEditorPane.setEditable(false);
        uPickItScrollPane.setViewportView(uPickItEditorPane);
        HTMLEditorKit uPickItKit = new HTMLEditorKit();
        uPickItEditorPane.setEditorKit(uPickItKit);
        uPickItEditorPane.setDocument(uPickItKit.createDefaultDocument());

        StyleSheet uPickItStyleSheet = uPickItKit.getStyleSheet();
        this.styleTables(uPickItKit.getStyleSheet());

        javax.swing.GroupLayout standingsPanelLayout = new javax.swing.GroupLayout(standingsPanel);
        standingsPanel.setLayout(standingsPanelLayout);
        standingsPanelLayout.setHorizontalGroup(
            standingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(standingsPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(standingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OwnedTeamsStandingsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                    .addComponent(ownedTeamsScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(standingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pickFourScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                    .addComponent(PickFourStandingsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(standingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ChosenWinnerStandingsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addComponent(uPickItScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(standingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FirstRoundBlowoutLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                    .addComponent(FirstOTLossLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FirstOTLossScrollPane)
                    .addComponent(FirstRoundBlowoutScrollPane)
                    .addComponent(CinderellaTeamLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CinderellaTeamScrollPane))
                .addGap(63, 63, 63))
        );
        standingsPanelLayout.setVerticalGroup(
            standingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(standingsPanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(standingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(standingsPanelLayout.createSequentialGroup()
                        .addGroup(standingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PickFourStandingsLabel)
                            .addComponent(ChosenWinnerStandingsLabel)
                            .addComponent(OwnedTeamsStandingsLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(standingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pickFourScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addComponent(ownedTeamsScrollPane)
                            .addComponent(uPickItScrollPane)))
                    .addGroup(standingsPanelLayout.createSequentialGroup()
                        .addComponent(CinderellaTeamLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CinderellaTeamScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FirstRoundBlowoutLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FirstRoundBlowoutScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FirstOTLossLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FirstOTLossScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(378, Short.MAX_VALUE))
        );

        standingsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ChosenWinnerStandingsLabel, CinderellaTeamLabel, FirstOTLossLabel, FirstRoundBlowoutLabel, OwnedTeamsStandingsLabel, PickFourStandingsLabel});

        TabbedPane.addTab("Standings", standingsPanel);

        playersPanel.setPreferredSize(new java.awt.Dimension(1100, 600));
        playersPanel.setLayout(new java.awt.GridBagLayout());

        PlayerViewerPanel.setBackground(backgroundColor);
        PlayerViewerPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        PlayerViewerPanel.setMinimumSize(new java.awt.Dimension(550, 700));
        java.awt.GridBagLayout PlayerViewerPanelLayout = new java.awt.GridBagLayout();
        PlayerViewerPanelLayout.columnWidths = new int[] {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0};
        PlayerViewerPanelLayout.rowHeights = new int[] {0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0};
        PlayerViewerPanel.setLayout(PlayerViewerPanelLayout);

        PickFourTeamsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        PickFourTeamsLabel.setText("Pick Four Teams:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.ipadx = 77;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        PlayerViewerPanel.add(PickFourTeamsLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PlayerViewerPanel.add(PlayerNameTextField, gridBagConstraints);

        ChosenWinnerTeam.setBackground(new java.awt.Color(255, 255, 255));
        ChosenWinnerTeam.setModel(new DefaultComboBoxModel(getTeams(db.getTeams())));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        PlayerViewerPanel.add(ChosenWinnerTeam, gridBagConstraints);

        PlayerNameLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        PlayerNameLabel.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PlayerViewerPanel.add(PlayerNameLabel, gridBagConstraints);

        UpdatePlayerButton.setText("Update");
        UpdatePlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatePlayerButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 18;
        gridBagConstraints.gridy = 32;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        PlayerViewerPanel.add(UpdatePlayerButton, gridBagConstraints);

        TiebreakerScoreLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        TiebreakerScoreLabel.setText("Tiebreaker Score:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PlayerViewerPanel.add(TiebreakerScoreLabel, gridBagConstraints);

        OwnedTeamsPane.setViewportView(OwnedTeamsList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.gridheight = 19;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        PlayerViewerPanel.add(OwnedTeamsPane, gridBagConstraints);

        SpotsPurchasedComboBox.setBackground(new java.awt.Color(255, 255, 255));
        SpotsPurchasedComboBox.setModel(getSpotsPurchasedComboBoxModel());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 18;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 0, 8);
        PlayerViewerPanel.add(SpotsPurchasedComboBox, gridBagConstraints);

        PickFourTeam4.setBackground(new java.awt.Color(255, 255, 255));
        PickFourTeam4.setModel(new DefaultComboBoxModel(getTeams(db.getTeams())));
        PickFourTeam4.setSelectedIndex(-1);
        PickFourTeam4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PickFourTeam4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        PlayerViewerPanel.add(PickFourTeam4, gridBagConstraints);

        BalanceTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PlayerViewerPanel.add(BalanceTextField, gridBagConstraints);

        SpotsPurchasedLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        SpotsPurchasedLabel.setText("Spots Purchased:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        PlayerViewerPanel.add(SpotsPurchasedLabel, gridBagConstraints);

        PickFourTeam3.setBackground(new java.awt.Color(255, 255, 255));
        PickFourTeam3.setModel(new DefaultComboBoxModel(getTeams(db.getTeams())));
        PickFourTeam3.setSelectedIndex(-1);
        PickFourTeam3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PickFourTeam3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        PlayerViewerPanel.add(PickFourTeam3, gridBagConstraints);

        EntryFeePaidCheckBox.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        EntryFeePaidCheckBox.setText("Entry Fee Paid");
        EntryFeePaidCheckBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 72;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PlayerViewerPanel.add(EntryFeePaidCheckBox, gridBagConstraints);

        OwnedTeamLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        OwnedTeamLabel.setText("Owned Teams:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.ipadx = 73;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PlayerViewerPanel.add(OwnedTeamLabel, gridBagConstraints);

        ChosenWinnerLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        ChosenWinnerLabel.setText("U-Pick-It:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        PlayerViewerPanel.add(ChosenWinnerLabel, gridBagConstraints);

        PickFourTeam2.setBackground(new java.awt.Color(255, 255, 255));
        PickFourTeam2.setModel(new DefaultComboBoxModel(getTeams(db.getTeams())));
        PickFourTeam2.setSelectedIndex(-1);
        PickFourTeam2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PickFourTeam2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        PlayerViewerPanel.add(PickFourTeam2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PlayerViewerPanel.add(TiebreakerScoreTextField, gridBagConstraints);

        BalanceLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        BalanceLabel.setText("Balance:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        PlayerViewerPanel.add(BalanceLabel, gridBagConstraints);

        ClearButton.setText("Clear");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 32;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        PlayerViewerPanel.add(ClearButton, gridBagConstraints);

        PickFourTeam1.setBackground(new java.awt.Color(255, 255, 255));
        PickFourTeam1.setModel(new DefaultComboBoxModel(getTeams(db.getTeams())));
        PickFourTeam1.setSelectedIndex(-1);
        PickFourTeam1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PickFourTeam1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        PlayerViewerPanel.add(PickFourTeam1, gridBagConstraints);

        PlayersListLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        PlayersListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PlayersListLabel.setText("Player Viewer:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 23;
        gridBagConstraints.ipadx = 284;
        PlayerViewerPanel.add(PlayersListLabel, gridBagConstraints);

        AssignTeamsButton.setText("Assign Teams");
        AssignTeamsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignTeamsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 32;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PlayerViewerPanel.add(AssignTeamsButton, gridBagConstraints);

        playerMessageLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        playerMessageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 32;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PlayerViewerPanel.add(playerMessageLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 47, 0);
        playersPanel.add(PlayerViewerPanel, gridBagConstraints);

        PlayerListPanel.setBackground(backgroundColor);
        PlayerListPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        PlayerListPanel.setLayout(new java.awt.GridBagLayout());

        SpotsRemainingLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        SpotsRemainingLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        SpotsRemainingLabel.setText("Spots Remaining: "+db.spotsRemaining());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 144;
        gridBagConstraints.ipady = 33;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(6, 17, 8, 17);
        PlayerListPanel.add(SpotsRemainingLabel, gridBagConstraints);

        PlayerViewerLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        PlayerViewerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PlayerViewerLabel.setText("Players:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.ipadx = 171;
        gridBagConstraints.insets = new java.awt.Insets(8, 17, 0, 17);
        PlayerListPanel.add(PlayerViewerLabel, gridBagConstraints);

        PlayersList.setModel(new DefaultComboBoxModel(getPlayers(db.getPlayers())));
        PlayersList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PlayersList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                PlayersListMousePressed(evt);
            }
        });
        PlayersList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PlayersListKeyPressed(evt);
            }
        });
        PlayersListPane.setViewportView(PlayersList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 237;
        gridBagConstraints.ipady = 310;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 17, 0, 17);
        PlayerListPanel.add(PlayersListPane, gridBagConstraints);

        DeletePlayerButton.setText("Delete");
        DeletePlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletePlayerButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(7, 112, 0, 0);
        PlayerListPanel.add(DeletePlayerButton, gridBagConstraints);

        ViewButton.setText("View");
        ViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.1;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        PlayerListPanel.add(ViewButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 310;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 7, 47, 0);
        playersPanel.add(PlayerListPanel, gridBagConstraints);

        PlayerListPanel1.setBackground(backgroundColor);
        PlayerListPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        PlayerViewerLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        PlayerViewerLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PlayerViewerLabel1.setText("Missing Fields:");

        missingFieldsScrollPane.setPreferredSize(new java.awt.Dimension(260, 132));
        missingFieldsScrollPane.setViewportView(missingFieldsTextPane);

        javax.swing.GroupLayout PlayerListPanel1Layout = new javax.swing.GroupLayout(PlayerListPanel1);
        PlayerListPanel1.setLayout(PlayerListPanel1Layout);
        PlayerListPanel1Layout.setHorizontalGroup(
            PlayerListPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlayerListPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(PlayerListPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(missingFieldsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PlayerViewerLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        PlayerListPanel1Layout.setVerticalGroup(
            PlayerListPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlayerListPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PlayerViewerLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(missingFieldsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addGap(102, 102, 102))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.ipady = 311;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 47, 8);
        playersPanel.add(PlayerListPanel1, gridBagConstraints);

        TabbedPane.addTab("Players", playersPanel);

        teamsPanel.setPreferredSize(new java.awt.Dimension(1100, 600));

        TeamSeedsPanel.setBackground(backgroundColor);
        TeamSeedsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        seed2Label.setText("#2");

        seed6Label.setText("#6");

        seed10Label.setText("#10");

        seed9Label.setText("#9");

        seed11Label.setText("#11");

        RegionLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        RegionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        RegionLabel.setText("Region:");

        seed12Label.setText("#12");

        seed13Label.setText("#13");

        seed3Label.setText("#3");

        seed7Label.setText("#7");

        seed5Label.setText("#5");

        seed4Label.setText("#4");

        UpdateTeamsButton.setText("Update");
        UpdateTeamsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateTeamsButtonActionPerformed(evt);
            }
        });

        seed15Label.setText("#15");

        seed1Label.setText("#1");

        seed16Label.setText("#16");

        RegionComboBox.setModel(new javax.swing.DefaultComboBoxModel(db.getRegionMatchups()));
        RegionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegionComboBoxActionPerformed(evt);
            }
        });

        seed8Label.setText("#8");

        seed14Label.setText("#14");

        javax.swing.GroupLayout TeamSeedsPanelLayout = new javax.swing.GroupLayout(TeamSeedsPanel);
        TeamSeedsPanel.setLayout(TeamSeedsPanelLayout);
        TeamSeedsPanelLayout.setHorizontalGroup(
            TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TeamSeedsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(seed1Label)
                        .addComponent(seed2Label)
                        .addComponent(seed3Label)
                        .addComponent(seed4Label))
                    .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(seed5Label)
                        .addComponent(seed6Label)
                        .addComponent(seed7Label)
                        .addComponent(seed8Label)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(team1TextField)
                    .addComponent(team2TextField)
                    .addComponent(team3TextField)
                    .addComponent(team4TextField)
                    .addComponent(team5TextField)
                    .addComponent(team6TextField)
                    .addComponent(team7TextField)
                    .addComponent(team8TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(seed15Label)
                            .addComponent(seed14Label)
                            .addComponent(seed13Label)
                            .addComponent(seed16Label, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(seed10Label)
                            .addComponent(seed9Label))
                        .addComponent(seed12Label))
                    .addComponent(seed11Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(team12TextField)
                        .addComponent(team11TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(team10TextField)
                        .addComponent(team9TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(team16TextField)
                        .addComponent(team15TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(team14TextField)
                        .addComponent(team13TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(TeamSeedsPanelLayout.createSequentialGroup()
                .addComponent(RegionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RegionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TeamSeedsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(UpdateTeamsButton))
        );
        TeamSeedsPanelLayout.setVerticalGroup(
            TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TeamSeedsPanelLayout.createSequentialGroup()
                .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RegionComboBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(team1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(team16TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seed1Label)
                    .addComponent(seed16Label))
                .addGap(18, 18, 18)
                .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(team2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(team15TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seed2Label)
                    .addComponent(seed15Label))
                .addGap(18, 18, 18)
                .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TeamSeedsPanelLayout.createSequentialGroup()
                        .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(team3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seed3Label))
                        .addGap(18, 18, 18)
                        .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(team4TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seed4Label)))
                    .addGroup(TeamSeedsPanelLayout.createSequentialGroup()
                        .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(team14TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seed14Label))
                        .addGap(18, 18, 18)
                        .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(team13TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seed13Label))))
                .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TeamSeedsPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TeamSeedsPanelLayout.createSequentialGroup()
                                .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(team5TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(seed5Label))
                                .addGap(18, 18, 18)
                                .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(team6TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(seed6Label)))
                            .addGroup(TeamSeedsPanelLayout.createSequentialGroup()
                                .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(team12TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(seed12Label))
                                .addGap(18, 18, 18)
                                .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(team11TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(seed11Label))))
                        .addGap(18, 18, 18)
                        .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(team10TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seed10Label))
                        .addGap(18, 18, 18)
                        .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(team9TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seed9Label)))
                    .addGroup(TeamSeedsPanelLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(team7TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seed7Label))
                        .addGap(18, 18, 18)
                        .addGroup(TeamSeedsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(team8TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seed8Label))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(UpdateTeamsButton))
        );

        TeamsListPanel.setBackground(backgroundColor);
        TeamsListPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        TeamsList.setModel(new DefaultComboBoxModel(db.getTeams().toArray()));
        TeamsList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        TeamsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TeamsListMouseClicked(evt);
            }
        });
        TeamsList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TeamsListKeyPressed(evt);
            }
        });
        TeamsListPane.setViewportView(TeamsList);

        TeamsListLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        TeamsListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TeamsListLabel.setText("Teams:");

        DeleteTeamButton.setText("Delete");
        DeleteTeamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteTeamButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TeamsListPanelLayout = new javax.swing.GroupLayout(TeamsListPanel);
        TeamsListPanel.setLayout(TeamsListPanelLayout);
        TeamsListPanelLayout.setHorizontalGroup(
            TeamsListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TeamsListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(TeamsListPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(TeamsListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(DeleteTeamButton)
                    .addComponent(TeamsListPane, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );
        TeamsListPanelLayout.setVerticalGroup(
            TeamsListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TeamsListPanelLayout.createSequentialGroup()
                .addComponent(TeamsListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TeamsListPane, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(DeleteTeamButton))
        );

        BracketTextPane.setBackground(backgroundColor);
        BracketTextPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        BracketTextPane.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        BracketScrollPane.setViewportView(BracketTextPane);

        BracketLabel.setBackground(backgroundColor);
        BracketLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BracketLabel.setText("Bracket");
        BracketLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BracketLabel.setOpaque(true);

        TeamScoresPanel.setBackground(backgroundColor);
        TeamScoresPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        TeamsListLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        TeamsListLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TeamsListLabel1.setText("Team Scores:");

        AddScoreButton.setText("Add Score");
        AddScoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddScoreButtonActionPerformed(evt);
            }
        });

        Team1ComboBox.setModel(new DefaultComboBoxModel(db.getTeams().toArray()));
        Team1ComboBox.setSelectedIndex(-1);
        Team1ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Team1ComboBoxActionPerformed(evt);
            }
        });

        Team1OpponentComboBox.setModel(new DefaultComboBoxModel(db.getTeams().toArray()));
        Team1OpponentComboBox.setSelectedIndex(-1);
        Team1OpponentComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Team1OpponentComboBoxActionPerformed(evt);
            }
        });

        otCheckBox.setText("First Overtime Game?");

        javax.swing.GroupLayout TeamScoresPanelLayout = new javax.swing.GroupLayout(TeamScoresPanel);
        TeamScoresPanel.setLayout(TeamScoresPanelLayout);
        TeamScoresPanelLayout.setHorizontalGroup(
            TeamScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TeamsListLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TeamScoresPanelLayout.createSequentialGroup()
                .addComponent(otCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddScoreButton))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TeamScoresPanelLayout.createSequentialGroup()
                .addGroup(TeamScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Team1OpponentComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Team1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TeamScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Team1ScoreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Team1OpponentScoreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        TeamScoresPanelLayout.setVerticalGroup(
            TeamScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TeamScoresPanelLayout.createSequentialGroup()
                .addComponent(TeamsListLabel1)
                .addGap(24, 24, 24)
                .addGroup(TeamScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Team1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Team1ScoreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(TeamScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Team1OpponentScoreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Team1OpponentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(TeamScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddScoreButton)
                    .addComponent(otCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout teamsPanelLayout = new javax.swing.GroupLayout(teamsPanel);
        teamsPanel.setLayout(teamsPanelLayout);
        teamsPanelLayout.setHorizontalGroup(
            teamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teamsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TeamSeedsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(TeamsListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(teamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BracketLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BracketScrollPane)
                    .addGroup(teamsPanelLayout.createSequentialGroup()
                        .addComponent(TeamScoresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 434, Short.MAX_VALUE)))
                .addContainerGap())
        );
        teamsPanelLayout.setVerticalGroup(
            teamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teamsPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(teamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TeamSeedsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TeamsListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(teamsPanelLayout.createSequentialGroup()
                        .addComponent(TeamScoresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(BracketLabel)
                        .addGap(6, 6, 6)
                        .addComponent(BracketScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        TabbedPane.addTab("Teams", teamsPanel);

        settingsPanel.setPreferredSize(new java.awt.Dimension(1100, 600));

        SettingsUpdateButton.setText("Update");
        SettingsUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingsUpdateButtonActionPerformed(evt);
            }
        });

        RegionMatchupsPanel.setBackground(new java.awt.Color(204, 204, 255));
        RegionMatchupsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        RegionMatchupsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        RegionMatchupsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RegionMatchupsLabel.setText("Region Matchups:");

        Region3Label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Region3Label.setText("Region 3");

        vs1Label.setText("vs");

        Region4Label.setText("Region 4");
        Region4Label.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        Region1ComboBox.setModel(new DefaultComboBoxModel(db.getRegionMatchups()));
        Region1ComboBox.setSelectedIndex(0);
        Region1ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Region1ComboBoxActionPerformed(evt);
            }
        });

        Region2ComboBox.setModel(new DefaultComboBoxModel(db.getRegionMatchups()));
        Region2ComboBox.setSelectedIndex(0);
        Region2ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Region2ComboBoxActionPerformed(evt);
            }
        });

        vs2Label.setText("vs");

        javax.swing.GroupLayout RegionMatchupsPanelLayout = new javax.swing.GroupLayout(RegionMatchupsPanel);
        RegionMatchupsPanel.setLayout(RegionMatchupsPanelLayout);
        RegionMatchupsPanelLayout.setHorizontalGroup(
            RegionMatchupsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegionMatchupsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RegionMatchupsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Region1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(RegionMatchupsPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(Region3Label, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RegionMatchupsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RegionMatchupsPanelLayout.createSequentialGroup()
                        .addComponent(vs1Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Region2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(RegionMatchupsPanelLayout.createSequentialGroup()
                        .addComponent(vs2Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Region4Label, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(RegionMatchupsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        RegionMatchupsPanelLayout.setVerticalGroup(
            RegionMatchupsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegionMatchupsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RegionMatchupsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegionMatchupsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Region1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vs1Label)
                    .addComponent(Region2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegionMatchupsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Region3Label)
                    .addComponent(vs2Label)
                    .addComponent(Region4Label))
                .addContainerGap())
        );

        ContestPrizesPanel.setBackground(new java.awt.Color(204, 204, 255));
        ContestPrizesPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        ContestComboBox.setModel(new DefaultComboBoxModel(db.getPrizes()));
        ContestComboBox.setSelectedIndex(-1);
        ContestComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContestComboBoxActionPerformed(evt);
            }
        });

        ContestPrizesLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        ContestPrizesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ContestPrizesLabel.setText("Contest Prizes:");

        ContestLabel.setText("Contest:");

        PrizeLabel.setText("Prize:");

        DollarSignLabel2.setText("$");

        javax.swing.GroupLayout ContestPrizesPanelLayout = new javax.swing.GroupLayout(ContestPrizesPanel);
        ContestPrizesPanel.setLayout(ContestPrizesPanelLayout);
        ContestPrizesPanelLayout.setHorizontalGroup(
            ContestPrizesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContestPrizesPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ContestPrizesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ContestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PrizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DollarSignLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ContestPrizesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ContestComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PrizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(ContestPrizesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ContestPrizesPanelLayout.setVerticalGroup(
            ContestPrizesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContestPrizesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContestPrizesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContestPrizesPanelLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(ContestPrizesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ContestLabel)
                            .addComponent(ContestComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ContestPrizesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PrizeLabel)
                            .addComponent(DollarSignLabel2)
                            .addComponent(PrizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(ContestPrizesLabel))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        PlayerPricingPanel.setBackground(new java.awt.Color(204, 204, 255));
        PlayerPricingPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        SpotsComboBox.setModel(this.getSpotsPurchasedComboBoxModel());
        SpotsComboBox.setSelectedIndex(-1);
        SpotsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpotsComboBoxActionPerformed(evt);
            }
        });

        PriceLabel.setText("Price:");

        SpotsLabel.setText("Spots:");

        DollarSignLabel.setText("$");

        PlayerPricingLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        PlayerPricingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PlayerPricingLabel.setText("Player Pricing:");

        javax.swing.GroupLayout PlayerPricingPanelLayout = new javax.swing.GroupLayout(PlayerPricingPanel);
        PlayerPricingPanel.setLayout(PlayerPricingPanelLayout);
        PlayerPricingPanelLayout.setHorizontalGroup(
            PlayerPricingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlayerPricingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PlayerPricingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PlayerPricingPanelLayout.createSequentialGroup()
                        .addComponent(PriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DollarSignLabel))
                    .addComponent(SpotsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PlayerPricingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(SpotsComboBox, 0, 120, Short.MAX_VALUE)
                    .addComponent(PriceTextField))
                .addContainerGap())
            .addComponent(PlayerPricingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PlayerPricingPanelLayout.setVerticalGroup(
            PlayerPricingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlayerPricingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PlayerPricingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PlayerPricingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SpotsLabel)
                    .addComponent(SpotsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PlayerPricingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PriceLabel)
                    .addComponent(PriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DollarSignLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        LeaderboardPanel.setBackground(new java.awt.Color(204, 204, 255));
        LeaderboardPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        PlayerPricingLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        PlayerPricingLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PlayerPricingLabel1.setText("Leaderboard:");

        LeaderboardSizeLabel.setText("Size:");

        LeaderboardSizeComboBox.setModel(new DefaultComboBoxModel(getLeaderboardSizeArray(db.getPlayers().size())));

        javax.swing.GroupLayout LeaderboardPanelLayout = new javax.swing.GroupLayout(LeaderboardPanel);
        LeaderboardPanel.setLayout(LeaderboardPanelLayout);
        LeaderboardPanelLayout.setHorizontalGroup(
            LeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeaderboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LeaderboardSizeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LeaderboardSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
            .addComponent(PlayerPricingLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        LeaderboardPanelLayout.setVerticalGroup(
            LeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeaderboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PlayerPricingLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LeaderboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LeaderboardSizeLabel)
                    .addComponent(LeaderboardSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        DataResetPanel.setBackground(new java.awt.Color(204, 204, 255));
        DataResetPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        DataResetLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        DataResetLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DataResetLabel.setText("Data Reset:");

        ResetPlayerDataRadioButton.setText("Reset Player Data");

        RemoveTeamsRadioButton.setText("Remove Teams");

        RemoveScoresRadioButton.setText("Remove Scores");

        RemovePlayersRadioButton.setText("Remove Players");

        javax.swing.GroupLayout DataResetPanelLayout = new javax.swing.GroupLayout(DataResetPanel);
        DataResetPanel.setLayout(DataResetPanelLayout);
        DataResetPanelLayout.setHorizontalGroup(
            DataResetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DataResetPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DataResetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DataResetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(DataResetPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(DataResetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(ResetPlayerDataRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RemovePlayersRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RemoveScoresRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RemoveTeamsRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        DataResetPanelLayout.setVerticalGroup(
            DataResetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DataResetPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DataResetLabel)
                .addGap(18, 18, 18)
                .addComponent(RemoveTeamsRadioButton)
                .addGap(18, 18, 18)
                .addComponent(RemoveScoresRadioButton)
                .addGap(18, 18, 18)
                .addComponent(RemovePlayersRadioButton)
                .addGap(18, 18, 18)
                .addComponent(ResetPlayerDataRadioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        SettingsTitleLabel.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        SettingsTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SettingsTitleLabel.setText("March Madness Group Settings:");

        muteCheckBox.setText("Mute");
        muteCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muteCheckBoxActionPerformed(evt);
            }
        });

        animationCheckBox.setText("Hide Animation");
        animationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animationCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap(344, Short.MAX_VALUE)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(muteCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(animationCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SettingsUpdateButton))
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(LeaderboardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PlayerPricingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, 0)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(RegionMatchupsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ContestPrizesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, 0)
                        .addComponent(DataResetPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(SettingsTitleLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(344, Short.MAX_VALUE))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(SettingsTitleLabel)
                .addGap(10, 10, 10)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ContestPrizesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PlayerPricingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, 0)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RegionMatchupsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LeaderboardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(DataResetPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SettingsUpdateButton)
                    .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(muteCheckBox)
                        .addComponent(animationCheckBox)))
                .addContainerGap(527, Short.MAX_VALUE))
        );

        TabbedPane.addTab("Settings", settingsPanel);

        MenuBar.setSize(new java.awt.Dimension(48, 25));

        FileMenu.setText("File");
        FileMenu.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        NewMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.META_MASK));
        NewMenuItem.setText("New");
        NewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(NewMenuItem);

        SaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.META_MASK));
        SaveMenuItem.setText("Save");
        SaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(SaveMenuItem);

        SaveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.META_MASK));
        SaveAsMenuItem.setText("Save as...");
        SaveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(SaveAsMenuItem);

        OpenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.META_MASK));
        OpenMenuItem.setText("Open");
        OpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(OpenMenuItem);

        MenuBar.add(FileMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(TabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1097, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 667, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The method that is fired off when the Region Combo Box on the team page
     * is changed. Changes the Text Fields on the team page to show the teams
     * in that Region.
     * @param evt ActionEvent
     */
    private void RegionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegionComboBoxActionPerformed
        System.out.println("RegionComboBoxAction()");
        setTeamTextFields();
    }//GEN-LAST:event_RegionComboBoxActionPerformed

    private void AddScoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddScoreButtonActionPerformed
        System.out.println("AddScoreButton()");
        /**
         * Add score of two teams to database
         */
        Object selectedItem = Team1ComboBox.getSelectedItem();
        if(selectedItem == null) {
            if(otCheckBox.isSelected())
                otCheckBox.doClick();
            return;
        }
        TeamInterface team = db.findTeam(selectedItem.toString());
        if(team == null)
            return;
        int teamScore = 0;
        int oppScore = 0;
        List<TeamInterface> opponents = db.getOpponents(team);
        
        //if(!opponents.isEmpty()) {
        Object selectedItem2 = Team1OpponentComboBox.getSelectedItem();
        int gameNum = Team1OpponentComboBox.getSelectedIndex();
       
        if( selectedItem2 == null || gameNum < 0)
            return;
        TeamInterface opponent = db.findTeam(selectedItem2.toString());
        if(opponent == null)
            return;
        List<Integer> teamScores = db.getScores(team);
        List<Integer> oppScores = db.getScores(opponent);

        try {
                teamScore = Integer.parseInt(Team1ScoreTextField.getText());
                oppScore = Integer.parseInt(Team1OpponentScoreTextField.getText());
        } catch (NumberFormatException e) {
            System.out.println("Score not added. \"\" is not a number. Error Code: 2");
            return;
        }
        
        if(teamScore != oppScore) {
            if(teamScores.size() == gameNum)
                db.addScore(team, teamScore);
            else if(teamScores.size() > gameNum && teamScores.get(gameNum) != teamScore) {
                teamScores.remove(gameNum);
                teamScores.add(gameNum,teamScore);
                db.editScores(team, teamScores);
            }

            if (oppScores.size() == gameNum) {//Opponent doesn't have a score entered yet
                db.addScore(opponent, oppScore);
            } else if(oppScores.size() > gameNum && oppScores.get(gameNum) != oppScore) {//Opponent already had score entered
                oppScores.remove(gameNum);
                oppScores.add(gameNum,oppScore);
                db.editScores(opponent, oppScores);
            }
            
            if(otCheckBox.isVisible()) {
                if(otCheckBox.isSelected()) {
                    if(teamScore < oppScore)
                        db.setOTloser(team);
                    else
                        db.setOTloser(opponent);
                } else
                    db.setOTloser(null);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error: Tie scores are not allowed", "Error Score Entry", JOptionPane.ERROR_MESSAGE);
            return;
        }
            
        /**
        Team1OpponentScoreTextField.setText("");
        Team1ScoreTextField.setText("");
        Team1ComboBox.setModel(new DefaultComboBoxModel(getAliveTeams()));
        Team1OpponentComboBox.setModel(new DefaultComboBoxModel());
        **/
        this.setTeamTab();
        //updateStandings();
        //this.updateBracket();
        changesMade = true;
    }//GEN-LAST:event_AddScoreButtonActionPerformed

    private void PickFourTeam4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PickFourTeam4ActionPerformed
        System.out.println("PickFourTeamAction() - 4;"+evt.paramString());
        updatePickFourTeams();
    }//GEN-LAST:event_PickFourTeam4ActionPerformed

    private void SettingsUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsUpdateButtonActionPerformed
        //Pricing
        System.out.println("SettingsUpdate()");
        Object selected = SpotsComboBox.getSelectedItem();
        if(selected != null) {
            int spots = (Integer)selected;
            try {
                db.getPricing().set(spots, Double.parseDouble(PriceTextField.getText()));
            } catch(NumberFormatException e){}
        }
        
        //Prizes
        selected = ContestComboBox.getSelectedItem();
        if(selected != null) {
            PrizeType prize = (PrizeType)selected;
            try {
                db.setPrizeMoney(prize, Double.parseDouble(PrizeTextField.getText()));
            } catch(NumberFormatException e){}
        }
        
        //Regions update
        Region[] newRegions = new Region[4];
        newRegions[0] = (Region)Region1ComboBox.getSelectedItem();
        newRegions[1] = (Region)Region2ComboBox.getSelectedItem();
        newRegions[2] = Region.determineRegion(Region3Label.getText());
        newRegions[3] = Region.determineRegion(Region4Label.getText());
        
        Region[] regions = db.getRegionMatchups();
        boolean allSame = true;
        for(int i = 0; i < regions.length && allSame; i++)
            if(regions[i] != newRegions[i])
                allSame = false;
        if(!allSame)
            db.setRegionMatchups(newRegions);
        
        //leaderboard size
        selected = LeaderboardSizeComboBox.getSelectedItem();
        if(selected.toString().equals("MAX")) 
            db.setLeaderboardSize(-1);
        else
            db.setLeaderboardSize((Integer)selected);
        
        //Data reset
        if(RemoveTeamsRadioButton.isSelected()) {
            Iterator<TeamInterface> itr = new ArrayList<TeamInterface>(db.getTeams()).iterator();
            while(itr.hasNext())
                db.removeTeam(itr.next());
            RemoveTeamsRadioButton.doClick();
        }
        if(RemoveScoresRadioButton.isSelected()) {
            List<Integer> scores = new ArrayList<Integer>();
            scores.add(0);
            for(TeamInterface team: db.getTeams())
                db.editScores(team, scores);
            RemoveScoresRadioButton.doClick();
        }
        if(RemovePlayersRadioButton.isSelected()) {
            Iterator<PlayerInterface> players = db.getPlayers().iterator();
            
            while(!db.getPlayers().isEmpty())
                db.getPlayers().remove(0);
            //PlayersList.setModel(new DefaultComboBoxModel(getPlayers(db.getPlayers())));
            RemovePlayersRadioButton.doClick();
        }
        if(ResetPlayerDataRadioButton.isSelected()) {
            Iterator<PlayerInterface> players = db.getPlayers().iterator();
            while(players.hasNext()) {
                PlayerInterface player = players.next();
                player.setPaid(false);
                player.addChosenTeam(null);
                player.setPredictedScore(0);
                while(!player.getTeams().isEmpty())
                    player.getTeams().remove(0);
                while(!player.getPickFourTeams().isEmpty())
                    player.getPickFourTeams().remove(0);
                
            }
            ResetPlayerDataRadioButton.doClick();
        }
        db.update();
        //this.setPlayerFields();
        //this.updateStandings();
        //this.updateTeamComboBoxModels();
        //this.setTeamTextFields();
        //this.setTeamScores();
        //this.updateBracket();
        this.updateSettingsOptions();
        changesMade = true;
    }//GEN-LAST:event_SettingsUpdateButtonActionPerformed

    private void ContestComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContestComboBoxActionPerformed
        System.out.println("ContestComboBox()");
        Object selected = ContestComboBox.getSelectedItem();
        if(selected == null)
            return;
        PrizeTextField.setText(String.format("%.2f",db.getPrizeMoney((PrizeType)selected)));
    }//GEN-LAST:event_ContestComboBoxActionPerformed

    private void Region1ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Region1ComboBoxActionPerformed
        System.out.println("Region1ComboBox()");
        updateRegionMatchups();
    }//GEN-LAST:event_Region1ComboBoxActionPerformed

    private void UpdateTeamsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateTeamsButtonActionPerformed
        /**
         * Take the team name of every text field and either edit an existing team or add a new one
         */
        System.out.println("UpdateTeamsButton()");
        JTextField[] teamTextFields = getTeamTextFieldsArray();
        Region region = Region.determineRegion(RegionComboBox.getSelectedItem().toString());
        for(int i = 0; i < teamTextFields.length; i++) {
            TeamInterface temp = db.getTeam(i+1, region);
            if(!teamTextFields[i].getText().trim().equalsIgnoreCase("")) {
                if(temp == null)
                    db.addTeam(teamTextFields[i].getText().trim(), i+1,region);
                else
                    temp.setName(teamTextFields[i].getText());
            } else if(!db.teamsAssigned()) {
                db.removeTeam(temp);
            }
        }
        
        //updateTeamComboBoxModels();
        this.setTeamTab();
        //updateStandings();
        changesMade = true;
    }//GEN-LAST:event_UpdateTeamsButtonActionPerformed

    private void Team1ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Team1ComboBoxActionPerformed
        /**
         * Change team two name to the name of the opponent and team 2 score to score if there is one??
         */
        
        Object selectedItem = Team1ComboBox.getSelectedItem();
        if(selectedItem == null)
            return;
        TeamInterface team = db.findTeam(selectedItem.toString());
        if(team == null)
            return;
        List<TeamInterface> opponents = db.getOpponents(team);
        Team1OpponentComboBox.setModel(new DefaultComboBoxModel(getTeams(opponents)));
        Team1OpponentComboBox.setSelectedIndex((Team1OpponentComboBox.getItemCount()-1));
        setTeamScores();
    }//GEN-LAST:event_Team1ComboBoxActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        try {
            fileHandler.saveToFile();
        } catch (FileNotFoundException ex) {
            this.SaveAsMenuItemActionPerformed(evt);
        }
        changesMade = false;
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void DeletePlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletePlayerButtonActionPerformed
        /**
         * Delete selected players
         */
        if(db.teamsAssigned()) {
            JOptionPane.showMessageDialog(this, "Can't delete players after teams have been assigned",
                    "Error: Teams Assigned", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Iterator<PlayerInterface> itr = PlayersList.getSelectedValuesList().iterator();
        boolean noError = true;
        while(itr.hasNext() && noError) {
            noError = db.removePlayer(itr.next().toString()) != null;
        }
        
        //PlayersList.setModel(new DefaultComboBoxModel(getPlayers(db.getPlayers())));
        this.setPlayerTab();
        if(noError) {
            this.playerMessageLabel.setForeground(Color.black);
            this.playerMessageLabel.setText("Player(s) successfully deleted.");
        }
        else {
            this.playerMessageLabel.setForeground(Color.RED);
            this.playerMessageLabel.setText("Error could not delete player");
        }
        //updateStandings();
        editPlayer = null;
        changesMade = true;
    }//GEN-LAST:event_DeletePlayerButtonActionPerformed

    private void ViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewButtonActionPerformed
        System.out.println("ViewButton() - ");
                
        /**
         * Fill in fields with selected team data for editing and viewing purposes
         */
        editPlayer = null;
        Object selectedItem = PlayersList.getSelectedValue();
        if(selectedItem == null)
            return;
        db.update();
        PlayerInterface player = db.findPlayer(selectedItem.toString());
        editPlayer = player;
        System.out.println("Viewing: "+editPlayer);
        /*Name*/
        PlayerNameTextField.setText(player.getName());
        /*Spots purchased*/
        SpotsPurchasedComboBox.setSelectedIndex(player.getNumSpots()-1);
        /*Tiebreaker*/
        TiebreakerScoreTextField.setText(player.getPredictedScore()+"");
        /*Balance field*/
        BalanceTextField.setText(String.format("$%.2f",player.getBalance()));
        /*Balance paid*/
        if(player.hasPaid() != EntryFeePaidCheckBox.isSelected())
                EntryFeePaidCheckBox.doClick();
        /*Sets the player's chosen winner combobox model*/
        TeamInterface team = player.getChosenWinner();
        ChosenWinnerTeam.setSelectedItem(team == null ? null : team.getName());
        /*Pick Four*/
        JComboBox[] pickFourComboBoxes = {PickFourTeam1,PickFourTeam2,PickFourTeam3,PickFourTeam4};
        /*All teams in the database*/
        String[] teams = getTeams(db.getTeams());
        /*Clear out and replace all boxes with boxes full of all teams*/
        for(int i = 0; i < pickFourComboBoxes.length; i++) {
            DefaultComboBoxModel def = new DefaultComboBoxModel(teams);
            def.setSelectedItem(null);
            pickFourComboBoxes[i].setModel(def);
        }
        /*Set each combo box to a selected team if there is one*/
        Iterator<TeamInterface> itr = player.getPickFourTeams().iterator();
        for(int i = 0; i < pickFourComboBoxes.length && itr.hasNext(); i++) {
                pickFourComboBoxes[i].getModel().setSelectedItem(itr.next().getName());
        }
        
        OwnedTeamsList.setModel(new DefaultComboBoxModel(player.getTeams().toArray()));
        this.playerMessageLabel.setText("");
    }//GEN-LAST:event_ViewButtonActionPerformed

    private void UpdatePlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatePlayerButtonActionPerformed
        /**
         * Takes the data from various player fields and adds them to db
         */
        String name = PlayerNameTextField.getText().trim();
        int tieBreakerScore = 0;
        try {
        tieBreakerScore = Integer.parseInt(TiebreakerScoreTextField.getText());
        } catch(NumberFormatException e) {}
        int spotsPurchased = SpotsPurchasedComboBox.getSelectedIndex()+1;
        
        if(name.length() == 0) {
            setTeamTab();
            return;//no name entered
        }
        String message = "<html>";
        PlayerInterface player = editPlayer;
        if(player == null) {
            int errorCode = db.addPlayer(name, spotsPurchased);
            message += "- Player added successfully";
            if(errorCode != 0) {
                this.setPlayerTab();
                switch(errorCode) {
                    case 3:
                        message = "- Error. Not enough available spots remaining";
                        break;
                    case 4:
                        message = "- Error. Invalid Spots Purchased";
                        break;
                    case 5:
                        message = "- Error. Duplicate Player Name";
                        break;
                    default:
                        message = "- Error";
                        break;
                }
                JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            //this.playerMessageLabel.setText(message);
            player = db.findPlayer(name);
                
        }
        player.setName(name);
        if(editPlayer != null && spotsPurchased != editPlayer.getNumSpots() && db.teamsAssigned())
            message += "<br>-Error Teams Assigned. Cannot update Spots Purchased";
        else
            player.setNumSpots(spotsPurchased);

        if(godViewMode || db.getChampionTeam() == null)//Championship game has not happened
            player.setPredictedScore(tieBreakerScore);
        else if(player.getPredictedScore() != tieBreakerScore)
            message += "<br>-Cannot update tiebreaker score.";
        
        player.setPaid(EntryFeePaidCheckBox.isSelected());
        
        boolean changedTeams = false;
        boolean tourneyBegan = db.tournamentHasBegun();
        //if(godViewMode || !db.tournamentHasBegun()) {//Check if change has happened
            Object selected = ChosenWinnerTeam.getSelectedItem();
            if (selected != null) {//Something has been selected
                if(player.getChosenWinner() != null) {//Player has chosen winner
                    /*Chosen winner selected is different than player's chosen winner*/
                    if(!player.getChosenWinner().getName().equals(selected.toString())){
                        /*Either the tournament hasn't started or it has started but user is in god view mode*/
                        if(!tourneyBegan || (tourneyBegan && godViewMode))
                            player.addChosenTeam(db.findTeam(selected.toString()));
                        else
                            changedTeams = true;//dialog
                    }else
                        ;//donothing;
                } else
                    player.addChosenTeam(db.findTeam(selected.toString()));
            }
            
            JComboBox[] pickFourComboBoxes = {PickFourTeam1, PickFourTeam2, PickFourTeam3, PickFourTeam4};
            List<TeamInterface> newPickFour = new ArrayList<>(4);
            
            for (JComboBox box : pickFourComboBoxes) {
                selected = box.getSelectedItem();
                if (selected != null) {
                    newPickFour.add(db.findTeam(selected.toString()));
                }
            }
            boolean allSame = player.getPickFourTeams().size() == 4;
            for(TeamInterface team: newPickFour)
                if(allSame)
                    allSame = player.getPickFourTeams().contains(team);
            if(!allSame) {
                if(!tourneyBegan || (tourneyBegan && godViewMode))
                    player.setPickFourTeams(newPickFour);
                else
                    changedTeams = true;
            }
            
        if(changedTeams) //Check if change has happened
            message += "<br>-Cannot update team selections once scores have been entered.";
        
            
        if(!(message.equals("<html>") || message.equals("<html>- Player added successfully"))) {
            JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
            //this.ViewButtonActionPerformed(evt);
            //return;
        }
        editPlayer = null;
        this.setPlayerTab();
        //playerMessageLabel.setText(message);
        changesMade = true;
    }//GEN-LAST:event_UpdatePlayerButtonActionPerformed

    private void DeleteTeamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteTeamButtonActionPerformed
        if(db.teamsAssigned()) {
            JOptionPane.showMessageDialog(this, "Can't delete teams after teams have been assigned",
                    "Error: Teams Assigned", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Iterator<String> itr = TeamsList.getSelectedValuesList().iterator();
        boolean noError = true;
        while(itr.hasNext() && noError) {
            noError = db.removeTeam(itr.next()) != null;
        } 
        
        this.setTeamTab();
        changesMade = true;
    }//GEN-LAST:event_DeleteTeamButtonActionPerformed

    private void Team1OpponentComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Team1OpponentComboBoxActionPerformed
       setTeamScores();
    }//GEN-LAST:event_Team1OpponentComboBoxActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        this.setPlayerTab();
        this.playerMessageLabel.setText("");
        editPlayer = null;
    }//GEN-LAST:event_ClearButtonActionPerformed

    private void PickFourTeam1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PickFourTeam1ActionPerformed
        System.out.println("PickFourTeamAction() - 1;"+evt.paramString());
        updatePickFourTeams();
    }//GEN-LAST:event_PickFourTeam1ActionPerformed

    private void PickFourTeam2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PickFourTeam2ActionPerformed
        System.out.println("PickFourTeamAction() - 2;"+evt.paramString());
        updatePickFourTeams();
    }//GEN-LAST:event_PickFourTeam2ActionPerformed

    private void PickFourTeam3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PickFourTeam3ActionPerformed
        System.out.println("PickFourTeamAction() - 3;"+evt.paramString());
        updatePickFourTeams();
    }//GEN-LAST:event_PickFourTeam3ActionPerformed

    private void AssignTeamsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignTeamsButtonActionPerformed
        System.out.println("AssignTeams()");
        String message = "<html>";
        boolean messageDialog = false;
        if(!db.bracketInitialized()) {
            message += "Missing Teams<br>";
            messageDialog = true;
        }
        if(!(db.spotsRemaining() == 0)) {
            message += "Not All Spots Purchased<br>";
            messageDialog = true;
        }
        if(db.teamsAssigned()) {
            message = "<html>Some teams have been assigned<br>Would you like to reassign all teams?";
            messageDialog = false;
        }
        if(message.equals("<html>"))
            message = "Are you sure you're ready to assign teams?";
        if (!messageDialog && JOptionPane.showConfirmDialog(this, 
            message, "Assign Teams", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION){
            db.assignTeams();
            //this.playAudio(marchMadnessFile);
            this.playersPanel.startCrazySequence();
            changesMade = true;
        } else if(messageDialog) {
            this.playAudio(buzzerFile);
            JOptionPane.showMessageDialog(this, message);
        }
        
    }//GEN-LAST:event_AssignTeamsButtonActionPerformed

    private void Region2ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Region2ComboBoxActionPerformed
        updateRegionMatchups();
    }//GEN-LAST:event_Region2ComboBoxActionPerformed

    private void SpotsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpotsComboBoxActionPerformed
        Object selection = SpotsComboBox.getSelectedItem();
        if(selection == null)
            return;
        PriceTextField.setText(String.format("%.2f",db.getPricing().get((Integer)selection)));
    }//GEN-LAST:event_SpotsComboBoxActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(!changesMade) {
            this.savePreferences();
            System.exit(0);
            return;
        }
        this.playAudio(buzzerFile);
        int returnVal = JOptionPane.showConfirmDialog(this, 
            "<html>You may have unsaved changes.<br>Would you like to save before exiting?", "Really Closing?", 
            JOptionPane.YES_NO_CANCEL_OPTION,
            JOptionPane.QUESTION_MESSAGE);
        if (returnVal == JOptionPane.YES_OPTION){
            this.SaveButtonActionPerformed(null);
            this.savePreferences();
            System.exit(0);
        } else if(returnVal == JOptionPane.NO_OPTION) {
            this.savePreferences();
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void TabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabbedPaneStateChanged
        //different tab
        int tabIndex = TabbedPane.getSelectedIndex();
        //switch statement and load tab that is selected
        System.out.println("Tab: "+tabIndex);
        switch(tabIndex) {
            case 0://main
                this.setMainTab();
                for(PrizeType p: db.getPrizes())
                    System.out.println(p+" "+db.getPrizeWinnerTeam(p)+" "+db.getPrizeWinner(p));
                break;
            case 1://standings
                this.updateStandings();
                break;
            case 2://players
                this.setPlayerTab();
                break;
            case 3://teams
                this.setTeamTab();
                break;
            case 4://settings
                this.updateSettingsOptions();
                break;
            default:
                break;
        }
    }//GEN-LAST:event_TabbedPaneStateChanged

    private void SaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuItemActionPerformed
        try {
            fileHandler.saveToFile();
        } catch (FileNotFoundException ex) {
            this.SaveAsMenuItemActionPerformed(evt);
        }
        this.changesMade = false;
    }//GEN-LAST:event_SaveMenuItemActionPerformed

    private void OpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileFilter() {

            @Override
            public String getDescription() {
                return "March Madness Files (*.mm)";
            }

            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    String filename = f.getName().toLowerCase();
                    return filename.endsWith(".mm");
                }
            }
        });
        int option = chooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            fileHandler.setFile(chooser.getSelectedFile());
            try {
                db = new MarchMadnessDB();
                fileHandler.initialize();
            } catch (FileNotFoundException ex) {}
              catch (IOException e) {}
        }
        this.TabbedPaneStateChanged(null);
    }//GEN-LAST:event_OpenMenuItemActionPerformed

    private void SaveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsMenuItemActionPerformed
       JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileFilter() {

            public String getDescription() {
                return "March Madness Files (*.mm)";
            }

            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    String filename = f.getName().toLowerCase();
                    return filename.endsWith(".mm");
                }
            }
        });
        try {
            int option = chooser.showSaveDialog(this);
            if (option == JFileChooser.APPROVE_OPTION && chooser.getDialogType() == JFileChooser.SAVE_DIALOG) {
                File file = chooser.getSelectedFile();
                if (file == null) {
                    return;
                }
                if (file.exists()) {
                    fileHandler.setFile(chooser.getSelectedFile());
                    fileHandler.saveToFile();
                } else {
                    chooser.approveSelection();
                    try {
                        if(!file.getAbsolutePath().endsWith(".mm"))
                            file = new File(file.getAbsolutePath().trim()+".mm");
                        file.createNewFile();
                    } catch (IOException ex) {
                        Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    fileHandler.setFile(file);
                    fileHandler.saveToFile();
                }
                changesMade = false;
            }
        } catch(FileNotFoundException e) {
                
        }
        this.TabbedPaneStateChanged(null);
    }//GEN-LAST:event_SaveAsMenuItemActionPerformed

    private void muteCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muteCheckBoxActionPerformed
        mute = muteCheckBox.isSelected();
        if(mute && introClip != null && introClip.isActive())
            introClip.stop();
        //else
          //  playIntro();
    }//GEN-LAST:event_muteCheckBoxActionPerformed

    private void NewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewMenuItemActionPerformed
        if(changesMade &&
            JOptionPane.showConfirmDialog(this, 
                    "<html>You may have unsaved changes.<br>If you continue you will lose all unsaved changes.<br><br>"
                            + "Are you sure you would like to continue?", 
                    "Unsaved Changes",
                    JOptionPane.YES_OPTION, JOptionPane.ERROR_MESSAGE) != 
                    JOptionPane.YES_OPTION) 
                return;
        
        db = new MarchMadnessDB();
        fileHandler.setFile(new File("Untitled.mm"));
        this.changesMade = true;
        this.setMainTitle("March Madness Board");
        this.setMainSubtitle("By Clay Mackenthun");
        this.TabbedPaneStateChanged(null);
    }//GEN-LAST:event_NewMenuItemActionPerformed

    private void OutputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputFileButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileFilter() {

            @Override
            public String getDescription() {
                return "Text Files (*.txt)";
            }

            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    String filename = f.getName().toLowerCase();
                    return filename.endsWith(".txt");
                }
            }
        });
        try {
            int option = chooser.showSaveDialog(this);
            if (option == JFileChooser.APPROVE_OPTION && chooser.getDialogType() == JFileChooser.SAVE_DIALOG) {
                File file = chooser.getSelectedFile();
                if (file == null) {
                    return;
                }
                if (file.exists()) {
                    System.out.println("Output: "+fileHandler.fillOutputFile(file));
                } else {
                    chooser.approveSelection();
                    try {
                        if(!file.getAbsolutePath().endsWith(".txt"))
                            file = new File(file.getAbsolutePath().trim()+".txt");
                        file.createNewFile();
                    } catch (IOException ex) {
                        Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    System.out.println("Output: "+fileHandler.fillOutputFile(file));
                }
                changesMade = false;
            }
        } catch(FileNotFoundException e) {
                
        }
    }//GEN-LAST:event_OutputFileButtonActionPerformed

    private void PlayersListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PlayersListMousePressed
        if(evt.getClickCount() == 1) {
            this.ViewButtonActionPerformed(null);
        }
    }//GEN-LAST:event_PlayersListMousePressed

    private void TeamsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TeamsListMouseClicked
        if(evt.getClickCount() == 2) {
            Object teamName = TeamsList.getSelectedValue();
            if(teamName == null)
                return;
            TeamInterface team = db.findTeam(teamName.toString());
            if(team == null)
                return;
            RegionComboBox.setSelectedItem(team.getRegion());
        }
    }//GEN-LAST:event_TeamsListMouseClicked

    private void PlayersListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PlayersListKeyPressed
        System.out.println(evt.paramString());
        if(evt.getKeyCode() == 8)//Delete key
            this.DeletePlayerButtonActionPerformed(null);
        else if(evt.getKeyCode() == 10)//Enter key
            this.ViewButtonActionPerformed(null);
    }//GEN-LAST:event_PlayersListKeyPressed

    private void TeamsListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TeamsListKeyPressed
        if(evt.getKeyCode() == 8)//Delete key
            this.DeleteTeamButtonActionPerformed(null);
        else if(evt.getKeyCode() == 10) {//Enter key
            Object teamName = TeamsList.getSelectedValue();
            if(teamName == null)
                return;
            TeamInterface team = db.findTeam(teamName.toString());
            if(team == null)
                return;
            RegionComboBox.setSelectedItem(team.getRegion());
        }
    }//GEN-LAST:event_TeamsListKeyPressed

    private void MMIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MMIconMouseClicked
        if(evt.getClickCount() != 2)
            return;
        if(!godViewMode) {
            String entry = JOptionPane.showInputDialog(this, "Enter God View Password", 
                    "God View", JOptionPane.PLAIN_MESSAGE);
            if(entry != null && entry.equalsIgnoreCase(godViewPassword)) {
                this.MMIcon.setIcon(new ImageIcon(this.getClass().getResource(mainIconGodModePath)));
                mainPanel.startCrazySequence();
                godViewMode = true;
            }
        } else {
            JOptionPane.showMessageDialog(this, "God View Deactivated.");
            this.MMIcon.setIcon(new ImageIcon(this.getClass().getResource(mainIconPath)));
            godViewMode = false;
        }
    }//GEN-LAST:event_MMIconMouseClicked

    private void HelpIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HelpIconMouseClicked
        if(infoFrame == null) {
        infoFrame = new InfoFrame(db);
        infoFrame.setVisible(true);
        }else{
            infoFrame.dispose();
            infoFrame = new InfoFrame(db);
            infoFrame.setVisible(true);
        }
    }//GEN-LAST:event_HelpIconMouseClicked

    private void animationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animationCheckBoxActionPerformed
        if(animationCheckBox.isSelected()) {
            this.settingsPanel.stopAnimation();
            this.mainPanel.stopAnimation();
            this.playersPanel.stopAnimation();
            this.teamsPanel.stopAnimation();
            this.standingsPanel.stopAnimation();
        }else{
            this.settingsPanel.startAnimation();
            this.mainPanel.startAnimation();
            this.playersPanel.startAnimation();
            this.teamsPanel.startAnimation();
            this.standingsPanel.startAnimation();
        }
            
    }//GEN-LAST:event_animationCheckBoxActionPerformed

    private void MainTitleLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MainTitleLabelMouseClicked
        if(evt.getClickCount() != 2)
           return;
        String entry = JOptionPane.showInputDialog(this, "Enter Title", 
                    "Edit Title", JOptionPane.PLAIN_MESSAGE);
        if(entry != null) {
            entry = entry.trim();
            if(entry.length() == 0)
                return;
            this.setMainTitle(entry);
            this.changesMade = true;
        }
    }//GEN-LAST:event_MainTitleLabelMouseClicked

    private void mainSubtitleLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainSubtitleLabelMouseClicked
        if(evt.getClickCount() != 2)
           return;
        String entry = JOptionPane.showInputDialog(this, "Enter Subtitle", 
                    "Edit Subtitle", JOptionPane.PLAIN_MESSAGE);
        if(entry != null) {
            entry = entry.trim();
            if(entry.length() == 0)
                return;
            this.setMainSubtitle(entry);
            this.changesMade = true;
        }
    }//GEN-LAST:event_mainSubtitleLabelMouseClicked

    private void setTeamTab() {
        this.setTeamTextFields();
        Team1ComboBox.setModel(new DefaultComboBoxModel(getAliveTeams()));
        Team1ComboBox.setSelectedIndex(-1);
        Team1OpponentScoreTextField.setText("");
        Team1ScoreTextField.setText("");
        Team1OpponentComboBox.setModel(new DefaultComboBoxModel());
        TeamsList.setModel(new DefaultComboBoxModel(this.getTeams(db.getTeams())));
        this.updateBracket();
        otCheckBox.setVisible(db.getOTloser() == null);
        if((db.getOTloser() == null) && otCheckBox.isSelected())
            otCheckBox.doClick();
    }
    
    private JTextField[] getTeamTextFieldsArray() { 
        JTextField[] teamTextFields = {team1TextField,team2TextField,team3TextField,team4TextField,team5TextField,
            team6TextField,team7TextField,team8TextField,team9TextField,team10TextField,
            team11TextField,team12TextField,team13TextField,team14TextField,team15TextField,team16TextField};
        return teamTextFields;
    }
    
    private void setTeamTextFields() {
        Region region = Region.determineRegion(RegionComboBox.getSelectedItem().toString());
        JTextField[] teamTextFields = getTeamTextFieldsArray();
        for(int i = 0; i < teamTextFields.length; i++) {
            TeamInterface temp = db.getTeam(i+1,region);
            if(temp == null) {
                teamTextFields[i].setText("");
                teamTextFields[i].setForeground(Color.black);
            } else {
                teamTextFields[i].setText(temp.getName());
                if(!temp.is_alive())
                    teamTextFields[i].setForeground(Color.red);
                else
                    teamTextFields[i].setForeground(Color.black);
            }
        }
    }
    
    private ComboBoxModel getSpotsPurchasedComboBoxModel() {
        Integer[] nums = new Integer[db.getPricing().size()-1];//No zero price
        for(int i = 0; i < nums.length; i++) 
            nums[i] = i+1;
        return new DefaultComboBoxModel(nums);
    }
    
    private String[] getTeams(List<TeamInterface> teamsList) {
        String[] teams = new String[teamsList.size()];
        Iterator<TeamInterface> itr = teamsList.iterator();
        for(int i = 0; i < teams.length && itr.hasNext(); i++) {
            teams[i] = itr.next().getName();
        }
        return teams;
    }
    
    private String[] getPlayers(List<PlayerInterface> playerList) {
        String[] players = new String[playerList.size()];
        Iterator<PlayerInterface> itr = playerList.iterator();
        for(int i = 0; i < players.length && itr.hasNext(); i++) {
            players[i] = itr.next().getName();
        }
        return players;
    }
    
    private String[] getAliveTeams() {
        
        List<TeamInterface> teamsList = new ArrayList(db.getTeams());
        Iterator<TeamInterface> itr = teamsList.iterator();
        String[] teams = new String[teamsList.size()];
        
        int elimIndex = teams.length-1;
        int aliveIndex = 0;
        while(itr.hasNext()) {
            TeamInterface temp = itr.next();
            if(temp.is_alive()) {
                teams[aliveIndex] = temp.getName();
                aliveIndex++;
            } else {
                teams[elimIndex] = temp.getName();
                elimIndex--;
            }
                
        }
        return teams;
    }
    
    private void updateTeamComboBoxModels() {
        String[] allTeams = getTeams(db.getTeams());
        
        JComboBox[] pickFourComboBoxes = {PickFourTeam1,PickFourTeam2,PickFourTeam3,PickFourTeam4};
        String[] teams = getTeams(db.getTeams());
        for(int i = 0; i < pickFourComboBoxes.length; i++) {
            DefaultComboBoxModel model = new DefaultComboBoxModel(teams);
            model.setSelectedItem(null);
            pickFourComboBoxes[i].setModel(model);
        }
        
        ChosenWinnerTeam.setModel(new DefaultComboBoxModel(allTeams));
        ChosenWinnerTeam.setSelectedIndex(-1);
    }
    
    
    
    private void updatePickFourTeams() {
        JComboBox[] pickFourComboBoxes = {PickFourTeam1,PickFourTeam2,PickFourTeam3,PickFourTeam4};
        Object[] selectedValues = new Object[pickFourComboBoxes.length];
        String[] names = new String[0];
        for(int i = 0; i < pickFourComboBoxes.length; i++) {
            selectedValues[i] = pickFourComboBoxes[i].getSelectedItem();
            if(selectedValues[i] == null) {
                if(names.length == 0)
                    names = this.getTeams(db.getTeams());
                DefaultComboBoxModel temp = new DefaultComboBoxModel(names);
                temp.setSelectedItem(null);
                pickFourComboBoxes[i].setModel(temp);
            }
        }
        for(int i = 0; i < pickFourComboBoxes.length; i++) {
            for(int j = 0; j < selectedValues.length; j++) {
                if(i != j) {
                    if(selectedValues[j] != null)
                        pickFourComboBoxes[i].removeItem(selectedValues[j]);
                }
            }
        }
    }
    
    private Integer[] getLeaderboardSizeArray(int max) {
        Integer[] sizes = new Integer[max];
        for(int i = 0; i < sizes.length; i++) 
            sizes[i] = i+1;
        return sizes;
    }
    
    private void setTeamScores() {
       Object selectedItem = Team1ComboBox.getSelectedItem();
       Object selectedItem2 = Team1OpponentComboBox.getSelectedItem();
       int gameNum = Team1OpponentComboBox.getSelectedIndex();
       
       Team1ScoreTextField.setText("");
       Team1OpponentScoreTextField.setText("");
       
       if(selectedItem == null || selectedItem2 == null || gameNum < 0)
           return;
       
       TeamInterface team = db.findTeam(selectedItem.toString());
       TeamInterface opponent = db.findTeam(selectedItem2.toString());
       List<Integer> teamScores = db.getScores(team);
       List<Integer> oppScores = db.getScores(opponent);
      
       if(teamScores.size() > gameNum) {
           Team1ScoreTextField.setText(""+teamScores.get(gameNum));
       }
       if(oppScores.size() > gameNum) {
           Team1OpponentScoreTextField.setText(""+oppScores.get(gameNum));
       }
       otCheckBox.setVisible((db.getOTloser() == null) || 
               (db.getOTloser().equals(team) || db.getOTloser().equals(opponent)));
        if(otCheckBox.isVisible() && (db.getOTloser() == null) ==  otCheckBox.isSelected())
            otCheckBox.doClick();
       
           
    }
    
    private void setMainTab() {
        mainPanel.repaint();
        //PICK FOUR
        String seperator = "";
        int playerWidth =
                db.findLongestPlayerName()+5;//5 is padding
        int padding = 20;//db.findLongestTeamName();
        int width = playerWidth+padding;
        for(int i = 0; i < Math.max(width,60); i++) {
            seperator+= "=";
        }
            
        
        db.update();
        String html = "<html><table><thead><tr><th>Player</th><th>Earnings</th></tr></thead><tbody>";//</table></html>";

        //int playerNameLength = Math.max(db.findLongestPlayerName(),15);
        for(PlayerInterface player : db.getPlayers()) {
            double earnings = player.getBalance();
            if(!player.hasPaid())
                earnings += db.getPricing().get(player.getNumSpots());
            html += "<tr><td>"+player.toString()+"</td><td>"+String.format("%.2f", earnings)+"</td></tr>";
        }
        html += "</tbody></table></html>";
        PlayerEarningsEditorPane.setText(html);
        
        
        if(fileHandler.getFile() == null)
            FileLabel.setText("Editing: Untitled.mm");
        else
            FileLabel.setText("Editing: "+fileHandler.getFile().getName());
    }
    
    private void setPlayerTab() {
        PlayerNameTextField.setText("");
        SpotsPurchasedComboBox.setModel(getSpotsPurchasedComboBoxModel());
        TiebreakerScoreTextField.setText("");
        if(EntryFeePaidCheckBox.isSelected())
            EntryFeePaidCheckBox.doClick();
        BalanceTextField.setText("");
        this.updateTeamComboBoxModels();
        SpotsRemainingLabel.setText("Spots Remaining: "+db.spotsRemaining());
        OwnedTeamsList.setModel(new DefaultComboBoxModel());
        PlayersList.setModel(new DefaultComboBoxModel(db.getPlayers().toArray()));
        playerMessageLabel.setText("");
        editPlayer = null;
        try {
            int missingFieldsCaretPosition = missingFieldsTextPane.getCaretPosition();
            Document missingFields = missingFieldsTextPane.getDocument();
            missingFields.remove(0, missingFields.getLength());
            
            String response = "";
            //Look for open bracket spots
            int numTeams = db.getTeams().size();
            if (numTeams != 64) {
                response += "Open bracket spots: " + (64 - numTeams) + "\n";
            }

            //Look for open board spots
            int spotsRemaining = db.spotsRemaining();
            if (spotsRemaining != 0) {
                response += "Open board spots: " + spotsRemaining + "\n";
            }

            //Look for player's missing fields
            if (response.length() != 0) {
                response += "\n";
            }
            for (PlayerInterface player : db.getPlayers()) {
                String temp = "";
                if (player.getPredictedScore() == 0) {
                    temp += "\n-Tiebreaker Score";
                }

                if (!player.hasPaid()) {
                    temp += "\n-Entry Fee Payment";
                }

                if (player.getChosenWinner() == null) {
                    temp += "\n-Chosen Winner";
                }

                int numPickFourTeams = player.getPickFourTeams().size();
                if (numPickFourTeams != 4) {
                    temp += "\n-"+(4 - numPickFourTeams) + " Pick Four Team(s)";
                }

                int numOwnedTeams = player.getTeams().size();
                int spotsPurchased = player.getNumSpots();
                if (numOwnedTeams != spotsPurchased) {
                    temp += "\n-"+(spotsPurchased - numOwnedTeams) + " Purchased Team(s)";
                }

                if (temp.length() != 0) {
                    response += "Player: " + player.getName() + "" + temp + "\n\n";
                }
            }

            if (response.length() != 0) {
                missingFields.insertString(0, response, null);
            } else {
                missingFields.insertString(0, "No fields are missing!", null);
            }
            missingFieldsTextPane.setCaretPosition(missingFieldsCaretPosition);
        } catch (BadLocationException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void restorePreferences() {
        Preferences pref;
        pref = Preferences.userNodeForPackage(this.getClass());
        int x = pref.getInt("X:", 0);
        int y = pref.getInt("Y:", 0);
        int width = pref.getInt("WIDTH:", getWidth());
        int height = pref.getInt("HEIGHT:", getHeight());
        boolean animate = pref.getBoolean("ANIMATION:", false);
        if(animate != animationCheckBox.isSelected())
            animationCheckBox.doClick();
        
        this.setBounds(x, y, width, height);
        this.mute = pref.getBoolean("MUTE:", mute);
    }
    
    private void savePreferences() {
        Preferences pref;
        pref = Preferences.userNodeForPackage(this.getClass());
       
        pref.putInt("X:", this.getX());
        pref.putInt("Y:", this.getY());
        pref.putInt("WIDTH:", this.getWidth());
        pref.putInt("HEIGHT:", this.getHeight());
        pref.putBoolean("MUTE:", mute);
        pref.putBoolean("ANIMATION:", animationCheckBox.isSelected());
        
        try {
            pref.flush();
        } catch (BackingStoreException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateSettingsOptions() {
        Integer size = db.getLeaderboardSize();
        int max = db.getPlayers().size();
        Object selected;
        if(size > 0)
            selected = LeaderboardSizeComboBox.getSelectedItem();
        else
            selected = "MAX";
        //selected = (selected == null ? "MAX" : selected);
        LeaderboardSizeComboBox.setModel(new DefaultComboBoxModel(this.getLeaderboardSizeArray(max)));
        LeaderboardSizeComboBox.addItem("MAX");
        LeaderboardSizeComboBox.setSelectedItem(selected);
        SpotsComboBox.setModel(this.getSpotsPurchasedComboBoxModel());
        SpotsComboBox.setSelectedIndex(-1);
        ContestComboBox.setModel(new DefaultComboBoxModel(db.getPrizes()));
        ContestComboBox.setSelectedIndex(-1);
        PriceTextField.setText("");
        PrizeTextField.setText("");
        Region1ComboBox.setModel(new DefaultComboBoxModel(db.getRegionMatchups()));
        RegionComboBox.setSelectedIndex(0);
        this.updateRegionMatchups();
        if(muteCheckBox.isSelected() != mute)
            muteCheckBox.doClick();
        
    }
    
    private void updateRegionMatchups() {
        boolean oneSelection = Region1ComboBox.getSelectedIndex() != -1;
        boolean twoSelection = Region2ComboBox.getSelectedIndex() != -1;
        Object selection;
        if(oneSelection) {
            selection = Region2ComboBox.getSelectedItem();
            Region2ComboBox.setModel(new DefaultComboBoxModel(db.getRegionMatchups()));
            Region2ComboBox.setSelectedItem(selection);
            Region2ComboBox.removeItem(Region1ComboBox.getSelectedItem());
        }
        if(twoSelection) {
            selection = Region1ComboBox.getSelectedItem();
            Region1ComboBox.setModel(new DefaultComboBoxModel(db.getRegionMatchups()));
            Region1ComboBox.setSelectedItem(selection);
            Region1ComboBox.removeItem(Region2ComboBox.getSelectedItem());
        }
        if(oneSelection && twoSelection) {
            int index = Region1ComboBox.getSelectedIndex();
            int index3 = 0;
            int index4 = 0;
            if(index == 0) {
                index3 = 1;
                index4 = 2;
            } else if(index == 1) {
                index3 = 0;
                index4 = 2;
            }else if(index == 2) {
                index3 = 0;
                index4 = 1;
            } 
            Region3Label.setText(Region1ComboBox.getItemAt(index3).toString());
            Region4Label.setText(Region1ComboBox.getItemAt(index4).toString());
        }
    }
    
    private void updateBracket() {
        try {
            Document bracket = BracketTextPane.getStyledDocument();
            bracket.remove(0, bracket.getLength());
            int rank = 1;
            bracket.insertString(bracket.getLength(),
                    db.toString(),
                    null);
            BracketTextPane.setDocument(bracket);
        } catch (BadLocationException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateStandings() {
        db.update();
        
        int playerNameLength = Math.max(db.findLongestPlayerName(),12);
        //PICK FOUR
        pickFourEditorPane.setText(this.getPickFourLeaderboard());
        
        //OWNED TEAMS
        ownedTeamEditorPane.setText(this.getPlayerLeaderboard());
        //U-PICK-IT
        
        
        uPickItEditorPane.setText(this.getChosenWinnerLeaderboard());
        
        //Cinderella team //Blowout //First OT Loss
        try {
            Document[] docs = {CinderellaTeamTextPane.getStyledDocument(),
                FirstRoundBlowoutTextPane.getStyledDocument(), 
                FirstOTLossTextPane.getStyledDocument()};
            PrizeType[] prizes = {PrizeType.CINDERELLA_TEAM, 
                PrizeType.FIRST_ROUND_BLOWOUT, PrizeType.FIRST_OVERTIME_LOSS};
            
            for(int i = 0; i < docs.length; i++) {
                docs[i].remove(0, docs[i].getLength());
                Iterator<PlayerInterface> pItr = db.getPrizeWinner(prizes[i]).iterator();
                Iterator<TeamInterface> tItr = db.getPrizeWinnerTeam(prizes[i]).iterator();
                while(pItr.hasNext() && tItr.hasNext()) {
                        docs[i].insertString(docs[i].getLength(),
                        String.format("%-"+playerNameLength+"s %s%n",pItr.next().toString(),tItr.next().getName()),
                        null);   
                }
            }
            
        } catch(BadLocationException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public String getChosenWinnerLeaderboard() {
        int playerNameLength = Math.max(db.findLongestPlayerName(),12);
        PlayerInterface[] players = new PlayerInterface[db.getPlayers().size()];
        db.getPlayers().toArray(players);
        
        for(int i = players.length-1; i >= 0; i--) {
            for(int j = 1; j <= i; j++) {
                if(players[j-1].getChosenWinner() != null && players[j].getChosenWinner() != null) {
                    int compare = players[j-1].getChosenWinner().getName().compareToIgnoreCase(players[j].getChosenWinner().getName());
                    if(compare > 0) {
                        PlayerInterface temp = players[j-1];
                        players[j-1] = players[j];
                        players[j] = temp;
                    }
                }
            }
        }
        int teamLength = 0;
        for(PlayerInterface player: players) {
            if(player.getChosenWinner() != null) {
                int length = player.getChosenWinner().getName().length();
                if(length > teamLength)
                    teamLength = length;
            }
        }
        
        String leaderboard = "<html><table><thead><tr><th>Player</th><th>Chosen Winner</th><th>Tiebreaker</th></tr></thead><tbody>";
        for(PlayerInterface player : players) {
            if(player.getChosenWinner() != null && player.getChosenWinner().is_alive())
                leaderboard += "<tr><td>"+player.toString()+"</td><td>"+player.getChosenWinner().getName()+"</td><td>"+player.getPredictedScore()+"</td></tr>";
                //leaderboard += String.format("%-"+playerNameLength+"s %-"+teamLength+"s | %d%n",player.toString(),player.getChosenWinner().getName(),player.getPredictedScore());
        }
        
        return leaderboard;
    }
    
    public String getPlayerLeaderboard() {
        
        String leaderboard = "<html><table><thead><tr><th>#</th><th>Player</th><th>Teams Alive</th></tr></thead><tbody>";
        int playerNameLength = Math.max(db.findLongestPlayerName(),12);
        int rank = 0;
        
        int prevNum = -1;
        int numAtScore = 1;
        for(PlayerInterface player : db.getPlayerLeaderboard()) {
            int numAlive = player.numTeamsAlive();
            if(numAlive != prevNum) {
                rank+=numAtScore;
                numAtScore = 1;
                prevNum = numAlive;
            } else
                numAtScore++;
            leaderboard += "<tr><td>"+rank+"</td><td>"+player.toString()+"</td><td>"+player.numTeamsAlive()+"</td></tr>";
        }
        leaderboard += "</tbody></table></html>";
        return leaderboard;
    }
    
    public String getPickFourLeaderboard() {
        String leaderboard = "<html><table><thead><tr><th>#</th><th>Player</th><th>Points</th></tr></thead><tbody>";
        int playerNameLength = Math.max(db.findLongestPlayerName(),12);
        int rank = 0;
        int oldPoints = -1;
        int numAtScore = 1;
        for(PlayerInterface player : db.getPickFourLeaderBoard()) {
            int points = player.getPickFourPoints();
            int potential = db.getPotentialPickFourPoints(player)+points;
            if(points != oldPoints) {
                rank += numAtScore;
                numAtScore = 1;
                oldPoints = points;
            } else
                numAtScore++;
            leaderboard += "<tr><td>"+rank+"</td><td>"+player.toString()+"</td><td>"+points+"/"+potential+"</td></tr>";
        }
        leaderboard += "</tbody></table></html>";
        return leaderboard;
            
    }
    
    public String getMainTitle() {
        return this.MainTitleLabel.getText();
    }
    
    public void setMainTitle(String title) {
        if(title == null)
            return;
        if(this.MainTitleLabel != null)
            this.MainTitleLabel.setText(title.trim());
        this.mainTitle = title;
    }
    
    public String getMainSubtitle() {
        return this.mainSubtitleLabel.getText();
    }
    
    public void setMainSubtitle(String subtitle) {
        if(subtitle == null)
            return;
        if(this.mainSubtitleLabel != null)
            this.mainSubtitleLabel.setText(subtitle.trim());
        this.mainSubtitle = subtitle;
    }
    
    public void styleTables(StyleSheet sheet) {
        sheet.addRule(TABLE_STYLING);
        sheet.addRule(TABLE_ROW_STYLING);
        sheet.addRule(TABLE_CELL_STYLING);
        sheet.addRule(TABLE_HEAD_STYLING);
    }
    
    private void playIntro() {
        if(mute)
            return;
        try {
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(
            this.getClass().getResource(backgroundSong));
            introClip = AudioSystem.getClip();
            introClip.open(audioInputStream);
            introClip.start();
            
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void playAudio(String filePath) {
        if(mute)
            return;
        try {
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(
            this.getClass().getResource(filePath));
            Clip clip = AudioSystem.getClip();
            clip.open(audioInputStream);
            clip.start();
            
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Aqua".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainScreen frame = new MainScreen();
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddScoreButton;
    private javax.swing.JButton AssignTeamsButton;
    private javax.swing.JLabel BalanceLabel;
    private javax.swing.JTextField BalanceTextField;
    private javax.swing.JLabel BracketLabel;
    private javax.swing.JScrollPane BracketScrollPane;
    private javax.swing.JTextPane BracketTextPane;
    private javax.swing.JLabel ChosenWinnerLabel;
    private javax.swing.JLabel ChosenWinnerStandingsLabel;
    private javax.swing.JComboBox ChosenWinnerTeam;
    private javax.swing.JLabel CinderellaTeamLabel;
    private javax.swing.JScrollPane CinderellaTeamScrollPane;
    private javax.swing.JTextPane CinderellaTeamTextPane;
    private javax.swing.JButton ClearButton;
    private javax.swing.JComboBox ContestComboBox;
    private javax.swing.JLabel ContestLabel;
    private javax.swing.JLabel ContestPrizesLabel;
    private javax.swing.JPanel ContestPrizesPanel;
    private javax.swing.JLabel DataResetLabel;
    private javax.swing.JPanel DataResetPanel;
    private javax.swing.JButton DeletePlayerButton;
    private javax.swing.JButton DeleteTeamButton;
    private javax.swing.JLabel DollarSignLabel;
    private javax.swing.JLabel DollarSignLabel2;
    private javax.swing.JCheckBox EntryFeePaidCheckBox;
    private javax.swing.JLabel FileLabel;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JLabel FirstOTLossLabel;
    private javax.swing.JScrollPane FirstOTLossScrollPane;
    private javax.swing.JTextPane FirstOTLossTextPane;
    private javax.swing.JLabel FirstRoundBlowoutLabel;
    private javax.swing.JScrollPane FirstRoundBlowoutScrollPane;
    private javax.swing.JTextPane FirstRoundBlowoutTextPane;
    private javax.swing.JLabel HelpIcon;
    private javax.swing.JPanel LeaderboardPanel;
    private javax.swing.JComboBox LeaderboardSizeComboBox;
    private javax.swing.JLabel LeaderboardSizeLabel;
    private javax.swing.JLabel MMIcon;
    private javax.swing.JLabel MainTitleLabel;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem NewMenuItem;
    private javax.swing.JMenuItem OpenMenuItem;
    private javax.swing.JButton OutputFileButton;
    private javax.swing.JLabel OwnedTeamLabel;
    private javax.swing.JList OwnedTeamsList;
    private javax.swing.JScrollPane OwnedTeamsPane;
    private javax.swing.JLabel OwnedTeamsStandingsLabel;
    private javax.swing.JLabel PickFourStandingsLabel;
    private javax.swing.JComboBox PickFourTeam1;
    private javax.swing.JComboBox PickFourTeam2;
    private javax.swing.JComboBox PickFourTeam3;
    private javax.swing.JComboBox PickFourTeam4;
    private javax.swing.JLabel PickFourTeamsLabel;
    private javax.swing.JEditorPane PlayerEarningsEditorPane;
    private javax.swing.JLabel PlayerEarningsLabel;
    private javax.swing.JScrollPane PlayerEarningsScrollPane;
    private javax.swing.JPanel PlayerListPanel;
    private javax.swing.JPanel PlayerListPanel1;
    private javax.swing.JLabel PlayerNameLabel;
    private javax.swing.JTextField PlayerNameTextField;
    private javax.swing.JLabel PlayerPricingLabel;
    private javax.swing.JLabel PlayerPricingLabel1;
    private javax.swing.JPanel PlayerPricingPanel;
    private javax.swing.JLabel PlayerViewerLabel;
    private javax.swing.JLabel PlayerViewerLabel1;
    private javax.swing.JPanel PlayerViewerPanel;
    private javax.swing.JList PlayersList;
    private javax.swing.JLabel PlayersListLabel;
    private javax.swing.JScrollPane PlayersListPane;
    private javax.swing.JLabel PriceLabel;
    private javax.swing.JTextField PriceTextField;
    private javax.swing.JLabel PrizeLabel;
    private javax.swing.JTextField PrizeTextField;
    private javax.swing.JComboBox Region1ComboBox;
    private javax.swing.JComboBox Region2ComboBox;
    private javax.swing.JLabel Region3Label;
    private javax.swing.JLabel Region4Label;
    private javax.swing.JComboBox RegionComboBox;
    private javax.swing.JLabel RegionLabel;
    private javax.swing.JLabel RegionMatchupsLabel;
    private javax.swing.JPanel RegionMatchupsPanel;
    private javax.swing.JRadioButton RemovePlayersRadioButton;
    private javax.swing.JRadioButton RemoveScoresRadioButton;
    private javax.swing.JRadioButton RemoveTeamsRadioButton;
    private javax.swing.JRadioButton ResetPlayerDataRadioButton;
    private javax.swing.JMenuItem SaveAsMenuItem;
    private javax.swing.JButton SaveButton;
    private javax.swing.JMenuItem SaveMenuItem;
    private javax.swing.JLabel SettingsTitleLabel;
    private javax.swing.JButton SettingsUpdateButton;
    private javax.swing.JComboBox SpotsComboBox;
    private javax.swing.JLabel SpotsLabel;
    private javax.swing.JComboBox SpotsPurchasedComboBox;
    private javax.swing.JLabel SpotsPurchasedLabel;
    private javax.swing.JLabel SpotsRemainingLabel;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JComboBox Team1ComboBox;
    private javax.swing.JComboBox Team1OpponentComboBox;
    private javax.swing.JTextField Team1OpponentScoreTextField;
    private javax.swing.JTextField Team1ScoreTextField;
    private javax.swing.JPanel TeamScoresPanel;
    private javax.swing.JPanel TeamSeedsPanel;
    private javax.swing.JList TeamsList;
    private javax.swing.JLabel TeamsListLabel;
    private javax.swing.JLabel TeamsListLabel1;
    private javax.swing.JScrollPane TeamsListPane;
    private javax.swing.JPanel TeamsListPanel;
    private javax.swing.JLabel TiebreakerScoreLabel;
    private javax.swing.JTextField TiebreakerScoreTextField;
    private javax.swing.JButton UpdatePlayerButton;
    private javax.swing.JButton UpdateTeamsButton;
    private javax.swing.JButton ViewButton;
    private javax.swing.JCheckBox animationCheckBox;
    private mainscreen.MMPanel mainPanel;
    private javax.swing.JLabel mainSubtitleLabel;
    private javax.swing.JScrollPane missingFieldsScrollPane;
    private javax.swing.JTextPane missingFieldsTextPane;
    private javax.swing.JCheckBox muteCheckBox;
    private javax.swing.JCheckBox otCheckBox;
    private javax.swing.JEditorPane ownedTeamEditorPane;
    private javax.swing.JScrollPane ownedTeamsScrollPane;
    private javax.swing.JEditorPane pickFourEditorPane;
    private javax.swing.JScrollPane pickFourScrollPane;
    private javax.swing.JLabel playerMessageLabel;
    private mainscreen.MMPanel playersPanel;
    private javax.swing.JLabel seed10Label;
    private javax.swing.JLabel seed11Label;
    private javax.swing.JLabel seed12Label;
    private javax.swing.JLabel seed13Label;
    private javax.swing.JLabel seed14Label;
    private javax.swing.JLabel seed15Label;
    private javax.swing.JLabel seed16Label;
    private javax.swing.JLabel seed1Label;
    private javax.swing.JLabel seed2Label;
    private javax.swing.JLabel seed3Label;
    private javax.swing.JLabel seed4Label;
    private javax.swing.JLabel seed5Label;
    private javax.swing.JLabel seed6Label;
    private javax.swing.JLabel seed7Label;
    private javax.swing.JLabel seed8Label;
    private javax.swing.JLabel seed9Label;
    private mainscreen.MMPanel settingsPanel;
    private mainscreen.MMPanel standingsPanel;
    private javax.swing.JTextField team10TextField;
    private javax.swing.JTextField team11TextField;
    private javax.swing.JTextField team12TextField;
    private javax.swing.JTextField team13TextField;
    private javax.swing.JTextField team14TextField;
    private javax.swing.JTextField team15TextField;
    private javax.swing.JTextField team16TextField;
    private javax.swing.JTextField team1TextField;
    private javax.swing.JTextField team2TextField;
    private javax.swing.JTextField team3TextField;
    private javax.swing.JTextField team4TextField;
    private javax.swing.JTextField team5TextField;
    private javax.swing.JTextField team6TextField;
    private javax.swing.JTextField team7TextField;
    private javax.swing.JTextField team8TextField;
    private javax.swing.JTextField team9TextField;
    private mainscreen.MMPanel teamsPanel;
    private javax.swing.JEditorPane uPickItEditorPane;
    private javax.swing.JScrollPane uPickItScrollPane;
    private javax.swing.JLabel vs1Label;
    private javax.swing.JLabel vs2Label;
    // End of variables declaration//GEN-END:variables
    private PlayerInterface editPlayer;
    private String mainTitle = "March Madness Board";
    private String mainSubtitle = "By Clay Mackenthun";
    private String godViewPassword = "DEUS";
    private boolean godViewMode = false;
    private boolean changesMade = false;
    private boolean mute = false;
    private FileHandler fileHandler;
    private String marchMadnessFile = "/mainscreen/resources/march_madness_clip.wav";
    private String buzzerFile = "/mainscreen/resources/buzzer.wav";
    private Clip introClip;
    private String backgroundSong = "/mainscreen/resources/background.wav";
    private String mainIconPath = "/mainscreen/resources/mmadness_logo.png";
    private String mainIconGodModePath = "/mainscreen/resources/mmadness_logo_godmode.png";
    private Color backgroundColor = new Color(154,212,251);
    private InfoFrame infoFrame;
    private final String TABLE_STYLING = "table {color:#000; font-family:times; margin: 5px; font-size: 105%; }";
    private final String TABLE_ROW_STYLING = "tr {border-bottom: 1px solid black; }";
    private final String TABLE_CELL_STYLING = "td {text-align: center; margin-left: 8px; margin-right: 8px;}";
    private final String TABLE_HEAD_STYLING = "th {text-align: center; margin-left: 8px; margin-right: 8px;}";
}
